/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type WorkflowControllerPatchWorkflowStepDataRequest = {
  workflowId: string;
  stepId: string;
  /**
   * A header for idempotency purposes
   */
  idempotencyKey?: string | undefined;
};

export type WorkflowControllerPatchWorkflowStepDataResponseBody = {};

export type WorkflowControllerPatchWorkflowStepDataResponse = {
  headers: { [k: string]: Array<string> };
  result: WorkflowControllerPatchWorkflowStepDataResponseBody;
};

/** @internal */
export const WorkflowControllerPatchWorkflowStepDataRequest$inboundSchema:
  z.ZodType<
    WorkflowControllerPatchWorkflowStepDataRequest,
    z.ZodTypeDef,
    unknown
  > = z.object({
    workflowId: z.string(),
    stepId: z.string(),
    "idempotency-key": z.string().optional(),
  }).transform((v) => {
    return remap$(v, {
      "idempotency-key": "idempotencyKey",
    });
  });

/** @internal */
export type WorkflowControllerPatchWorkflowStepDataRequest$Outbound = {
  workflowId: string;
  stepId: string;
  "idempotency-key"?: string | undefined;
};

/** @internal */
export const WorkflowControllerPatchWorkflowStepDataRequest$outboundSchema:
  z.ZodType<
    WorkflowControllerPatchWorkflowStepDataRequest$Outbound,
    z.ZodTypeDef,
    WorkflowControllerPatchWorkflowStepDataRequest
  > = z.object({
    workflowId: z.string(),
    stepId: z.string(),
    idempotencyKey: z.string().optional(),
  }).transform((v) => {
    return remap$(v, {
      idempotencyKey: "idempotency-key",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace WorkflowControllerPatchWorkflowStepDataRequest$ {
  /** @deprecated use `WorkflowControllerPatchWorkflowStepDataRequest$inboundSchema` instead. */
  export const inboundSchema =
    WorkflowControllerPatchWorkflowStepDataRequest$inboundSchema;
  /** @deprecated use `WorkflowControllerPatchWorkflowStepDataRequest$outboundSchema` instead. */
  export const outboundSchema =
    WorkflowControllerPatchWorkflowStepDataRequest$outboundSchema;
  /** @deprecated use `WorkflowControllerPatchWorkflowStepDataRequest$Outbound` instead. */
  export type Outbound =
    WorkflowControllerPatchWorkflowStepDataRequest$Outbound;
}

export function workflowControllerPatchWorkflowStepDataRequestToJSON(
  workflowControllerPatchWorkflowStepDataRequest:
    WorkflowControllerPatchWorkflowStepDataRequest,
): string {
  return JSON.stringify(
    WorkflowControllerPatchWorkflowStepDataRequest$outboundSchema.parse(
      workflowControllerPatchWorkflowStepDataRequest,
    ),
  );
}

export function workflowControllerPatchWorkflowStepDataRequestFromJSON(
  jsonString: string,
): SafeParseResult<
  WorkflowControllerPatchWorkflowStepDataRequest,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      WorkflowControllerPatchWorkflowStepDataRequest$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'WorkflowControllerPatchWorkflowStepDataRequest' from JSON`,
  );
}

/** @internal */
export const WorkflowControllerPatchWorkflowStepDataResponseBody$inboundSchema:
  z.ZodType<
    WorkflowControllerPatchWorkflowStepDataResponseBody,
    z.ZodTypeDef,
    unknown
  > = z.object({});

/** @internal */
export type WorkflowControllerPatchWorkflowStepDataResponseBody$Outbound = {};

/** @internal */
export const WorkflowControllerPatchWorkflowStepDataResponseBody$outboundSchema:
  z.ZodType<
    WorkflowControllerPatchWorkflowStepDataResponseBody$Outbound,
    z.ZodTypeDef,
    WorkflowControllerPatchWorkflowStepDataResponseBody
  > = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace WorkflowControllerPatchWorkflowStepDataResponseBody$ {
  /** @deprecated use `WorkflowControllerPatchWorkflowStepDataResponseBody$inboundSchema` instead. */
  export const inboundSchema =
    WorkflowControllerPatchWorkflowStepDataResponseBody$inboundSchema;
  /** @deprecated use `WorkflowControllerPatchWorkflowStepDataResponseBody$outboundSchema` instead. */
  export const outboundSchema =
    WorkflowControllerPatchWorkflowStepDataResponseBody$outboundSchema;
  /** @deprecated use `WorkflowControllerPatchWorkflowStepDataResponseBody$Outbound` instead. */
  export type Outbound =
    WorkflowControllerPatchWorkflowStepDataResponseBody$Outbound;
}

export function workflowControllerPatchWorkflowStepDataResponseBodyToJSON(
  workflowControllerPatchWorkflowStepDataResponseBody:
    WorkflowControllerPatchWorkflowStepDataResponseBody,
): string {
  return JSON.stringify(
    WorkflowControllerPatchWorkflowStepDataResponseBody$outboundSchema.parse(
      workflowControllerPatchWorkflowStepDataResponseBody,
    ),
  );
}

export function workflowControllerPatchWorkflowStepDataResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<
  WorkflowControllerPatchWorkflowStepDataResponseBody,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      WorkflowControllerPatchWorkflowStepDataResponseBody$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'WorkflowControllerPatchWorkflowStepDataResponseBody' from JSON`,
  );
}

/** @internal */
export const WorkflowControllerPatchWorkflowStepDataResponse$inboundSchema:
  z.ZodType<
    WorkflowControllerPatchWorkflowStepDataResponse,
    z.ZodTypeDef,
    unknown
  > = z.object({
    Headers: z.record(z.array(z.string())),
    Result: z.lazy(() =>
      WorkflowControllerPatchWorkflowStepDataResponseBody$inboundSchema
    ),
  }).transform((v) => {
    return remap$(v, {
      "Headers": "headers",
      "Result": "result",
    });
  });

/** @internal */
export type WorkflowControllerPatchWorkflowStepDataResponse$Outbound = {
  Headers: { [k: string]: Array<string> };
  Result: WorkflowControllerPatchWorkflowStepDataResponseBody$Outbound;
};

/** @internal */
export const WorkflowControllerPatchWorkflowStepDataResponse$outboundSchema:
  z.ZodType<
    WorkflowControllerPatchWorkflowStepDataResponse$Outbound,
    z.ZodTypeDef,
    WorkflowControllerPatchWorkflowStepDataResponse
  > = z.object({
    headers: z.record(z.array(z.string())),
    result: z.lazy(() =>
      WorkflowControllerPatchWorkflowStepDataResponseBody$outboundSchema
    ),
  }).transform((v) => {
    return remap$(v, {
      headers: "Headers",
      result: "Result",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace WorkflowControllerPatchWorkflowStepDataResponse$ {
  /** @deprecated use `WorkflowControllerPatchWorkflowStepDataResponse$inboundSchema` instead. */
  export const inboundSchema =
    WorkflowControllerPatchWorkflowStepDataResponse$inboundSchema;
  /** @deprecated use `WorkflowControllerPatchWorkflowStepDataResponse$outboundSchema` instead. */
  export const outboundSchema =
    WorkflowControllerPatchWorkflowStepDataResponse$outboundSchema;
  /** @deprecated use `WorkflowControllerPatchWorkflowStepDataResponse$Outbound` instead. */
  export type Outbound =
    WorkflowControllerPatchWorkflowStepDataResponse$Outbound;
}

export function workflowControllerPatchWorkflowStepDataResponseToJSON(
  workflowControllerPatchWorkflowStepDataResponse:
    WorkflowControllerPatchWorkflowStepDataResponse,
): string {
  return JSON.stringify(
    WorkflowControllerPatchWorkflowStepDataResponse$outboundSchema.parse(
      workflowControllerPatchWorkflowStepDataResponse,
    ),
  );
}

export function workflowControllerPatchWorkflowStepDataResponseFromJSON(
  jsonString: string,
): SafeParseResult<
  WorkflowControllerPatchWorkflowStepDataResponse,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      WorkflowControllerPatchWorkflowStepDataResponse$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'WorkflowControllerPatchWorkflowStepDataResponse' from JSON`,
  );
}
