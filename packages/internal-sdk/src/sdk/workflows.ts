/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { workflowsCreate } from "../funcs/workflowsCreate.js";
import { workflowsDelete } from "../funcs/workflowsDelete.js";
import { workflowsGetStepData } from "../funcs/workflowsGetStepData.js";
import { workflowsGetWorkflowTestData } from "../funcs/workflowsGetWorkflowTestData.js";
import { workflowsRetrieve } from "../funcs/workflowsRetrieve.js";
import { workflowsUpdate } from "../funcs/workflowsUpdate.js";
import { workflowsWorkflowControllerGeneratePreview } from "../funcs/workflowsWorkflowControllerGeneratePreview.js";
import { workflowsWorkflowControllerPatchWorkflow } from "../funcs/workflowsWorkflowControllerPatchWorkflow.js";
import { workflowsWorkflowControllerPatchWorkflowStepData } from "../funcs/workflowsWorkflowControllerPatchWorkflowStepData.js";
import { workflowsWorkflowControllerSearchWorkflows } from "../funcs/workflowsWorkflowControllerSearchWorkflows.js";
import { workflowsWorkflowControllerSync } from "../funcs/workflowsWorkflowControllerSync.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";

export class Workflows extends ClientSDK {
  /**
   * Topic creation
   *
   * @remarks
   * Create a topic
   */
  async create(
    idempotencyKey?: string | undefined,
    options?: RequestOptions,
  ): Promise<operations.WorkflowControllerCreateResponse> {
    return unwrapAsync(workflowsCreate(
      this,
      idempotencyKey,
      options,
    ));
  }

  async workflowControllerSearchWorkflows(
    idempotencyKey?: string | undefined,
    options?: RequestOptions,
  ): Promise<operations.WorkflowControllerSearchWorkflowsResponse> {
    return unwrapAsync(workflowsWorkflowControllerSearchWorkflows(
      this,
      idempotencyKey,
      options,
    ));
  }

  async workflowControllerSync(
    workflowId: string,
    idempotencyKey?: string | undefined,
    options?: RequestOptions,
  ): Promise<operations.WorkflowControllerSyncResponse> {
    return unwrapAsync(workflowsWorkflowControllerSync(
      this,
      workflowId,
      idempotencyKey,
      options,
    ));
  }

  /**
   * Update subscriber
   *
   * @remarks
   * Used to update the subscriber entity with new information
   */
  async update(
    workflowId: string,
    idempotencyKey?: string | undefined,
    options?: RequestOptions,
  ): Promise<operations.WorkflowControllerUpdateResponse> {
    return unwrapAsync(workflowsUpdate(
      this,
      workflowId,
      idempotencyKey,
      options,
    ));
  }

  /**
   * Get topic
   *
   * @remarks
   * Get a topic by its topic key
   */
  async retrieve(
    workflowId: string,
    environmentId: string,
    idempotencyKey?: string | undefined,
    options?: RequestOptions,
  ): Promise<operations.WorkflowControllerGetWorkflowResponse> {
    return unwrapAsync(workflowsRetrieve(
      this,
      workflowId,
      environmentId,
      idempotencyKey,
      options,
    ));
  }

  /**
   * Delete topic
   *
   * @remarks
   * Delete a topic by its topic key if it has no subscribers
   */
  async delete(
    workflowId: string,
    idempotencyKey?: string | undefined,
    options?: RequestOptions,
  ): Promise<operations.WorkflowControllerRemoveWorkflowResponse | undefined> {
    return unwrapAsync(workflowsDelete(
      this,
      workflowId,
      idempotencyKey,
      options,
    ));
  }

  async workflowControllerPatchWorkflow(
    workflowId: string,
    idempotencyKey?: string | undefined,
    options?: RequestOptions,
  ): Promise<operations.WorkflowControllerPatchWorkflowResponse> {
    return unwrapAsync(workflowsWorkflowControllerPatchWorkflow(
      this,
      workflowId,
      idempotencyKey,
      options,
    ));
  }

  async workflowControllerGeneratePreview(
    workflowId: string,
    stepId: string,
    idempotencyKey?: string | undefined,
    options?: RequestOptions,
  ): Promise<operations.WorkflowControllerGeneratePreviewResponse> {
    return unwrapAsync(workflowsWorkflowControllerGeneratePreview(
      this,
      workflowId,
      stepId,
      idempotencyKey,
      options,
    ));
  }

  async getStepData(
    workflowId: string,
    stepId: string,
    idempotencyKey?: string | undefined,
    options?: RequestOptions,
  ): Promise<operations.WorkflowControllerGetWorkflowStepDataResponse> {
    return unwrapAsync(workflowsGetStepData(
      this,
      workflowId,
      stepId,
      idempotencyKey,
      options,
    ));
  }

  async workflowControllerPatchWorkflowStepData(
    workflowId: string,
    stepId: string,
    idempotencyKey?: string | undefined,
    options?: RequestOptions,
  ): Promise<operations.WorkflowControllerPatchWorkflowStepDataResponse> {
    return unwrapAsync(workflowsWorkflowControllerPatchWorkflowStepData(
      this,
      workflowId,
      stepId,
      idempotencyKey,
      options,
    ));
  }

  async getWorkflowTestData(
    workflowId: string,
    idempotencyKey?: string | undefined,
    options?: RequestOptions,
  ): Promise<operations.WorkflowControllerGetWorkflowTestDataResponse> {
    return unwrapAsync(workflowsGetWorkflowTestData(
      this,
      workflowId,
      idempotencyKey,
      options,
    ));
  }
}
