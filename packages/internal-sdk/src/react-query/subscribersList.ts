/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import {
  InfiniteData,
  InvalidateQueryFilters,
  QueryClient,
  QueryFunctionContext,
  QueryKey,
  useInfiniteQuery,
  UseInfiniteQueryResult,
  useQuery,
  UseQueryResult,
  useSuspenseInfiniteQuery,
  UseSuspenseInfiniteQueryResult,
  useSuspenseQuery,
  UseSuspenseQueryResult,
} from "@tanstack/react-query";
import { NovuCore } from "../core.js";
import { subscribersList } from "../funcs/subscribersList.js";
import { combineSignals } from "../lib/primitives.js";
import { RequestOptions } from "../lib/sdks.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";
import { PageIterator, unwrapResultIterator } from "../types/operations.js";
import { useNovuContext } from "./_context.js";
import {
  InfiniteQueryHookOptions,
  QueryHookOptions,
  SuspenseInfiniteQueryHookOptions,
  SuspenseQueryHookOptions,
  TupleToPrefixes,
} from "./_types.js";

export type SubscribersListQueryData =
  operations.SubscribersControllerListSubscribersResponse;

export type SubscribersListInfiniteQueryData = PageIterator<
  operations.SubscribersControllerListSubscribersResponse,
  { page: number }
>;

export type SubscribersListPageParams = PageIterator<
  operations.SubscribersControllerListSubscribersResponse,
  { page: number }
>["~next"];

/**
 * Get subscribers
 *
 * @remarks
 * Returns a list of subscribers, could paginated using the `page` and `limit` query parameter
 */
export function useSubscribersList(
  page?: number | undefined,
  limit?: number | undefined,
  idempotencyKey?: string | undefined,
  options?: QueryHookOptions<SubscribersListQueryData>,
): UseQueryResult<SubscribersListQueryData, Error> {
  const client = useNovuContext();
  return useQuery({
    ...buildSubscribersListQuery(
      client,
      page,
      limit,
      idempotencyKey,
      options,
    ),
    ...options,
  });
}

/**
 * Get subscribers
 *
 * @remarks
 * Returns a list of subscribers, could paginated using the `page` and `limit` query parameter
 */
export function useSubscribersListSuspense(
  page?: number | undefined,
  limit?: number | undefined,
  idempotencyKey?: string | undefined,
  options?: SuspenseQueryHookOptions<SubscribersListQueryData>,
): UseSuspenseQueryResult<SubscribersListQueryData, Error> {
  const client = useNovuContext();
  return useSuspenseQuery({
    ...buildSubscribersListQuery(
      client,
      page,
      limit,
      idempotencyKey,
      options,
    ),
    ...options,
  });
}

/**
 * Get subscribers
 *
 * @remarks
 * Returns a list of subscribers, could paginated using the `page` and `limit` query parameter
 */
export function useSubscribersListInfinite(
  page?: number | undefined,
  limit?: number | undefined,
  idempotencyKey?: string | undefined,
  options?: InfiniteQueryHookOptions<SubscribersListInfiniteQueryData>,
): UseInfiniteQueryResult<
  InfiniteData<SubscribersListInfiniteQueryData, SubscribersListPageParams>,
  Error
> {
  const client = useNovuContext();
  return useInfiniteQuery<
    SubscribersListInfiniteQueryData,
    Error,
    InfiniteData<SubscribersListInfiniteQueryData, SubscribersListPageParams>,
    QueryKey,
    SubscribersListPageParams
  >({
    ...buildSubscribersListInfiniteQuery(
      client,
      page,
      limit,
      idempotencyKey,
      options,
    ),
    initialPageParam: options?.initialPageParam,
    getNextPageParam: (previousPage) => previousPage["~next"],
    ...options,
  });
}

/**
 * Get subscribers
 *
 * @remarks
 * Returns a list of subscribers, could paginated using the `page` and `limit` query parameter
 */
export function useSubscribersListInfiniteSuspense(
  page?: number | undefined,
  limit?: number | undefined,
  idempotencyKey?: string | undefined,
  options?: SuspenseInfiniteQueryHookOptions<SubscribersListInfiniteQueryData>,
): UseSuspenseInfiniteQueryResult<
  InfiniteData<SubscribersListInfiniteQueryData, SubscribersListPageParams>,
  Error
> {
  const client = useNovuContext();
  return useSuspenseInfiniteQuery<
    SubscribersListInfiniteQueryData,
    Error,
    InfiniteData<SubscribersListInfiniteQueryData, SubscribersListPageParams>,
    QueryKey,
    SubscribersListPageParams
  >({
    ...buildSubscribersListInfiniteQuery(
      client,
      page,
      limit,
      idempotencyKey,
      options,
    ),
    initialPageParam: options?.initialPageParam,
    getNextPageParam: (previousPage) => previousPage["~next"],
    ...options,
  });
}

export function prefetchSubscribersList(
  queryClient: QueryClient,
  client$: NovuCore,
  page?: number | undefined,
  limit?: number | undefined,
  idempotencyKey?: string | undefined,
): Promise<void> {
  return queryClient.prefetchQuery({
    ...buildSubscribersListQuery(
      client$,
      page,
      limit,
      idempotencyKey,
    ),
  });
}

export function setSubscribersListData(
  client: QueryClient,
  queryKeyBase: [
    parameters: {
      page?: number | undefined;
      limit?: number | undefined;
      idempotencyKey?: string | undefined;
    },
  ],
  data: SubscribersListQueryData,
): SubscribersListQueryData | undefined {
  const key = queryKeySubscribersList(...queryKeyBase);

  return client.setQueryData<SubscribersListQueryData>(key, data);
}

export function invalidateSubscribersList(
  client: QueryClient,
  queryKeyBase: TupleToPrefixes<
    [parameters: {
      page?: number | undefined;
      limit?: number | undefined;
      idempotencyKey?: string | undefined;
    }]
  >,
  filters?: Omit<InvalidateQueryFilters, "queryKey" | "predicate" | "exact">,
): Promise<void> {
  return client.invalidateQueries({
    ...filters,
    queryKey: ["@novu/api", "Subscribers", "list", ...queryKeyBase],
  });
}

export function invalidateAllSubscribersList(
  client: QueryClient,
  filters?: Omit<InvalidateQueryFilters, "queryKey" | "predicate" | "exact">,
): Promise<void> {
  return client.invalidateQueries({
    ...filters,
    queryKey: ["@novu/api", "Subscribers", "list"],
  });
}

export function buildSubscribersListQuery(
  client$: NovuCore,
  page?: number | undefined,
  limit?: number | undefined,
  idempotencyKey?: string | undefined,
  options?: RequestOptions,
): {
  queryKey: QueryKey;
  queryFn: (context: QueryFunctionContext) => Promise<SubscribersListQueryData>;
} {
  return {
    queryKey: queryKeySubscribersList({ page, limit, idempotencyKey }),
    queryFn: async function subscribersListQueryFn(
      ctx,
    ): Promise<SubscribersListQueryData> {
      const sig = combineSignals(ctx.signal, options?.fetchOptions?.signal);
      const mergedOptions = {
        ...options,
        fetchOptions: { ...options?.fetchOptions, signal: sig },
      };

      return unwrapAsync(subscribersList(
        client$,
        page,
        limit,
        idempotencyKey,
        mergedOptions,
      ));
    },
  };
}

export function buildSubscribersListInfiniteQuery(
  client$: NovuCore,
  page?: number | undefined,
  limit?: number | undefined,
  idempotencyKey?: string | undefined,
  options?: RequestOptions,
): {
  queryKey: QueryKey;
  queryFn: (
    context: QueryFunctionContext<QueryKey, SubscribersListPageParams>,
  ) => Promise<SubscribersListInfiniteQueryData>;
} {
  return {
    queryKey: queryKeySubscribersList({ page, limit, idempotencyKey }),
    queryFn: async function subscribersListQuery(
      ctx,
    ): Promise<SubscribersListInfiniteQueryData> {
      const sig = combineSignals(ctx.signal, options?.fetchOptions?.signal);
      const mergedOptions = {
        ...options,
        fetchOptions: { ...options?.fetchOptions, signal: sig },
      };

      if (!ctx.pageParam) {
        return unwrapResultIterator(subscribersList(
          client$,
          page,
          limit,
          idempotencyKey,
          mergedOptions,
        ));
      }

      return unwrapResultIterator(subscribersList(
        client$,
        ctx.pageParam.page,
        limit,
        idempotencyKey,
        mergedOptions,
      ));
    },
  };
}

export function queryKeySubscribersList(
  parameters: {
    page?: number | undefined;
    limit?: number | undefined;
    idempotencyKey?: string | undefined;
  },
): QueryKey {
  return ["@novu/api", "Subscribers", "list", parameters];
}
