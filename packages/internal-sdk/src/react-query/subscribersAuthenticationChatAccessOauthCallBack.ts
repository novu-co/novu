/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import {
  InvalidateQueryFilters,
  QueryClient,
  QueryFunctionContext,
  QueryKey,
  useQuery,
  UseQueryResult,
  useSuspenseQuery,
  UseSuspenseQueryResult,
} from "@tanstack/react-query";
import { NovuCore } from "../core.js";
import {
  ChatAccessOauthCallBackAcceptEnum,
  subscribersAuthenticationChatAccessOauthCallBack,
} from "../funcs/subscribersAuthenticationChatAccessOauthCallBack.js";
import { combineSignals } from "../lib/primitives.js";
import { RequestOptions } from "../lib/sdks.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";
import { useNovuContext } from "./_context.js";
import {
  QueryHookOptions,
  SuspenseQueryHookOptions,
  TupleToPrefixes,
} from "./_types.js";

export { ChatAccessOauthCallBackAcceptEnum } from "../funcs/subscribersAuthenticationChatAccessOauthCallBack.js";

export type SubscribersAuthenticationChatAccessOauthCallBackQueryData =
  operations.SubscribersControllerChatOauthCallbackResponse;

/**
 * Handle providers oauth redirect
 */
export function useSubscribersAuthenticationChatAccessOauthCallBack(
  request: operations.SubscribersControllerChatOauthCallbackRequest,
  options?: QueryHookOptions<
    SubscribersAuthenticationChatAccessOauthCallBackQueryData
  >,
): UseQueryResult<
  SubscribersAuthenticationChatAccessOauthCallBackQueryData,
  Error
> {
  const client = useNovuContext();
  return useQuery({
    ...buildSubscribersAuthenticationChatAccessOauthCallBackQuery(
      client,
      request,
      options,
    ),
    ...options,
  });
}

/**
 * Handle providers oauth redirect
 */
export function useSubscribersAuthenticationChatAccessOauthCallBackSuspense(
  request: operations.SubscribersControllerChatOauthCallbackRequest,
  options?: SuspenseQueryHookOptions<
    SubscribersAuthenticationChatAccessOauthCallBackQueryData
  >,
): UseSuspenseQueryResult<
  SubscribersAuthenticationChatAccessOauthCallBackQueryData,
  Error
> {
  const client = useNovuContext();
  return useSuspenseQuery({
    ...buildSubscribersAuthenticationChatAccessOauthCallBackQuery(
      client,
      request,
      options,
    ),
    ...options,
  });
}

export function prefetchSubscribersAuthenticationChatAccessOauthCallBack(
  queryClient: QueryClient,
  client$: NovuCore,
  request: operations.SubscribersControllerChatOauthCallbackRequest,
): Promise<void> {
  return queryClient.prefetchQuery({
    ...buildSubscribersAuthenticationChatAccessOauthCallBackQuery(
      client$,
      request,
    ),
  });
}

export function setSubscribersAuthenticationChatAccessOauthCallBackData(
  client: QueryClient,
  queryKeyBase: [
    subscriberId: string,
    providerId: string,
    parameters: {
      hmacHash: string;
      environmentId: string;
      integrationIdentifier?: string | undefined;
      code: string;
      idempotencyKey?: string | undefined;
    },
  ],
  data: SubscribersAuthenticationChatAccessOauthCallBackQueryData,
): SubscribersAuthenticationChatAccessOauthCallBackQueryData | undefined {
  const key = queryKeySubscribersAuthenticationChatAccessOauthCallBack(
    ...queryKeyBase,
  );

  return client.setQueryData<
    SubscribersAuthenticationChatAccessOauthCallBackQueryData
  >(key, data);
}

export function invalidateSubscribersAuthenticationChatAccessOauthCallBack(
  client: QueryClient,
  queryKeyBase: TupleToPrefixes<
    [
      subscriberId: string,
      providerId: string,
      parameters: {
        hmacHash: string;
        environmentId: string;
        integrationIdentifier?: string | undefined;
        code: string;
        idempotencyKey?: string | undefined;
      },
    ]
  >,
  filters?: Omit<InvalidateQueryFilters, "queryKey" | "predicate" | "exact">,
): Promise<void> {
  return client.invalidateQueries({
    ...filters,
    queryKey: [
      "@novu/api",
      "Authentication",
      "chatAccessOauthCallBack",
      ...queryKeyBase,
    ],
  });
}

export function invalidateAllSubscribersAuthenticationChatAccessOauthCallBack(
  client: QueryClient,
  filters?: Omit<InvalidateQueryFilters, "queryKey" | "predicate" | "exact">,
): Promise<void> {
  return client.invalidateQueries({
    ...filters,
    queryKey: ["@novu/api", "Authentication", "chatAccessOauthCallBack"],
  });
}

export function buildSubscribersAuthenticationChatAccessOauthCallBackQuery(
  client$: NovuCore,
  request: operations.SubscribersControllerChatOauthCallbackRequest,
  options?: RequestOptions & {
    acceptHeaderOverride?: ChatAccessOauthCallBackAcceptEnum;
  },
): {
  queryKey: QueryKey;
  queryFn: (
    context: QueryFunctionContext,
  ) => Promise<SubscribersAuthenticationChatAccessOauthCallBackQueryData>;
} {
  return {
    queryKey: queryKeySubscribersAuthenticationChatAccessOauthCallBack(
      request.subscriberId,
      request.providerId,
      {
        hmacHash: request.hmacHash,
        environmentId: request.environmentId,
        integrationIdentifier: request.integrationIdentifier,
        code: request.code,
        idempotencyKey: request.idempotencyKey,
      },
    ),
    queryFn:
      async function subscribersAuthenticationChatAccessOauthCallBackQueryFn(
        ctx,
      ): Promise<SubscribersAuthenticationChatAccessOauthCallBackQueryData> {
        const sig = combineSignals(ctx.signal, options?.fetchOptions?.signal);
        const mergedOptions = {
          ...options,
          fetchOptions: { ...options?.fetchOptions, signal: sig },
        };

        return unwrapAsync(subscribersAuthenticationChatAccessOauthCallBack(
          client$,
          request,
          mergedOptions,
        ));
      },
  };
}

export function queryKeySubscribersAuthenticationChatAccessOauthCallBack(
  subscriberId: string,
  providerId: string,
  parameters: {
    hmacHash: string;
    environmentId: string;
    integrationIdentifier?: string | undefined;
    code: string;
    idempotencyKey?: string | undefined;
  },
): QueryKey {
  return [
    "@novu/api",
    "Authentication",
    "chatAccessOauthCallBack",
    subscriberId,
    providerId,
    parameters,
  ];
}
