/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import {
  MutationKey,
  useMutation,
  UseMutationResult,
} from "@tanstack/react-query";
import { NovuCore } from "../core.js";
import { subscribersCreate } from "../funcs/subscribersCreate.js";
import { combineSignals } from "../lib/primitives.js";
import { RequestOptions } from "../lib/sdks.js";
import * as components from "../models/components/index.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";
import { useNovuContext } from "./_context.js";
import { MutationHookOptions } from "./_types.js";

export type SubscribersCreateMutationVariables = {
  createSubscriberRequestDto: components.CreateSubscriberRequestDto;
  idempotencyKey?: string | undefined;
  options?: RequestOptions;
};

export type SubscribersCreateMutationData =
  operations.SubscribersControllerCreateSubscriberResponse;

/**
 * Create subscriber
 *
 * @remarks
 * Creates a subscriber entity, in the Novu platform. The subscriber will be later used to receive notifications, and access notification feeds. Communication credentials such as email, phone number, and 3 rd party credentials i.e slack tokens could be later associated to this entity.
 */
export function useSubscribersCreateMutation(
  options?: MutationHookOptions<
    SubscribersCreateMutationData,
    Error,
    SubscribersCreateMutationVariables
  >,
): UseMutationResult<
  SubscribersCreateMutationData,
  Error,
  SubscribersCreateMutationVariables
> {
  const client = useNovuContext();
  return useMutation({
    ...buildSubscribersCreateMutation(client, options),
    ...options,
  });
}

export function mutationKeySubscribersCreate(): MutationKey {
  return ["@novu/api", "Subscribers", "create"];
}

export function buildSubscribersCreateMutation(
  client$: NovuCore,
  hookOptions?: RequestOptions,
): {
  mutationKey: MutationKey;
  mutationFn: (
    variables: SubscribersCreateMutationVariables,
  ) => Promise<SubscribersCreateMutationData>;
} {
  return {
    mutationKey: mutationKeySubscribersCreate(),
    mutationFn: function subscribersCreateMutationFn({
      createSubscriberRequestDto,
      idempotencyKey,
      options,
    }): Promise<SubscribersCreateMutationData> {
      const mergedOptions = {
        ...hookOptions,
        ...options,
        fetchOptions: {
          ...hookOptions?.fetchOptions,
          ...options?.fetchOptions,
          signal: combineSignals(
            hookOptions?.fetchOptions?.signal,
            options?.fetchOptions?.signal,
          ),
        },
      };
      return unwrapAsync(subscribersCreate(
        client$,
        createSubscriberRequestDto,
        idempotencyKey,
        mergedOptions,
      ));
    },
  };
}
