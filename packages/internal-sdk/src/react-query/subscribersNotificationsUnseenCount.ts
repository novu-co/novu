/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import {
  InvalidateQueryFilters,
  QueryClient,
  QueryFunctionContext,
  QueryKey,
  useQuery,
  UseQueryResult,
  useSuspenseQuery,
  UseSuspenseQueryResult,
} from "@tanstack/react-query";
import { NovuCore } from "../core.js";
import { subscribersNotificationsUnseenCount } from "../funcs/subscribersNotificationsUnseenCount.js";
import { combineSignals } from "../lib/primitives.js";
import { RequestOptions } from "../lib/sdks.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";
import { useNovuContext } from "./_context.js";
import {
  QueryHookOptions,
  SuspenseQueryHookOptions,
  TupleToPrefixes,
} from "./_types.js";

export type SubscribersNotificationsUnseenCountQueryData =
  operations.SubscribersControllerGetUnseenCountResponse;

/**
 * Get the unseen in-app notifications count for subscribers feed
 */
export function useSubscribersNotificationsUnseenCount(
  request: operations.SubscribersControllerGetUnseenCountRequest,
  options?: QueryHookOptions<SubscribersNotificationsUnseenCountQueryData>,
): UseQueryResult<SubscribersNotificationsUnseenCountQueryData, Error> {
  const client = useNovuContext();
  return useQuery({
    ...buildSubscribersNotificationsUnseenCountQuery(
      client,
      request,
      options,
    ),
    ...options,
  });
}

/**
 * Get the unseen in-app notifications count for subscribers feed
 */
export function useSubscribersNotificationsUnseenCountSuspense(
  request: operations.SubscribersControllerGetUnseenCountRequest,
  options?: SuspenseQueryHookOptions<
    SubscribersNotificationsUnseenCountQueryData
  >,
): UseSuspenseQueryResult<SubscribersNotificationsUnseenCountQueryData, Error> {
  const client = useNovuContext();
  return useSuspenseQuery({
    ...buildSubscribersNotificationsUnseenCountQuery(
      client,
      request,
      options,
    ),
    ...options,
  });
}

export function prefetchSubscribersNotificationsUnseenCount(
  queryClient: QueryClient,
  client$: NovuCore,
  request: operations.SubscribersControllerGetUnseenCountRequest,
): Promise<void> {
  return queryClient.prefetchQuery({
    ...buildSubscribersNotificationsUnseenCountQuery(
      client$,
      request,
    ),
  });
}

export function setSubscribersNotificationsUnseenCountData(
  client: QueryClient,
  queryKeyBase: [
    subscriberId: string,
    parameters: {
      seen?: boolean | undefined;
      limit?: number | undefined;
      idempotencyKey?: string | undefined;
    },
  ],
  data: SubscribersNotificationsUnseenCountQueryData,
): SubscribersNotificationsUnseenCountQueryData | undefined {
  const key = queryKeySubscribersNotificationsUnseenCount(...queryKeyBase);

  return client.setQueryData<SubscribersNotificationsUnseenCountQueryData>(
    key,
    data,
  );
}

export function invalidateSubscribersNotificationsUnseenCount(
  client: QueryClient,
  queryKeyBase: TupleToPrefixes<
    [
      subscriberId: string,
      parameters: {
        seen?: boolean | undefined;
        limit?: number | undefined;
        idempotencyKey?: string | undefined;
      },
    ]
  >,
  filters?: Omit<InvalidateQueryFilters, "queryKey" | "predicate" | "exact">,
): Promise<void> {
  return client.invalidateQueries({
    ...filters,
    queryKey: ["@novu/api", "Notifications", "unseenCount", ...queryKeyBase],
  });
}

export function invalidateAllSubscribersNotificationsUnseenCount(
  client: QueryClient,
  filters?: Omit<InvalidateQueryFilters, "queryKey" | "predicate" | "exact">,
): Promise<void> {
  return client.invalidateQueries({
    ...filters,
    queryKey: ["@novu/api", "Notifications", "unseenCount"],
  });
}

export function buildSubscribersNotificationsUnseenCountQuery(
  client$: NovuCore,
  request: operations.SubscribersControllerGetUnseenCountRequest,
  options?: RequestOptions,
): {
  queryKey: QueryKey;
  queryFn: (
    context: QueryFunctionContext,
  ) => Promise<SubscribersNotificationsUnseenCountQueryData>;
} {
  return {
    queryKey: queryKeySubscribersNotificationsUnseenCount(
      request.subscriberId,
      {
        seen: request.seen,
        limit: request.limit,
        idempotencyKey: request.idempotencyKey,
      },
    ),
    queryFn: async function subscribersNotificationsUnseenCountQueryFn(
      ctx,
    ): Promise<SubscribersNotificationsUnseenCountQueryData> {
      const sig = combineSignals(ctx.signal, options?.fetchOptions?.signal);
      const mergedOptions = {
        ...options,
        fetchOptions: { ...options?.fetchOptions, signal: sig },
      };

      return unwrapAsync(subscribersNotificationsUnseenCount(
        client$,
        request,
        mergedOptions,
      ));
    },
  };
}

export function queryKeySubscribersNotificationsUnseenCount(
  subscriberId: string,
  parameters: {
    seen?: boolean | undefined;
    limit?: number | undefined;
    idempotencyKey?: string | undefined;
  },
): QueryKey {
  return [
    "@novu/api",
    "Notifications",
    "unseenCount",
    subscriberId,
    parameters,
  ];
}
