/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import {
  InvalidateQueryFilters,
  QueryClient,
  QueryFunctionContext,
  QueryKey,
  useQuery,
  UseQueryResult,
  useSuspenseQuery,
  UseSuspenseQueryResult,
} from "@tanstack/react-query";
import { NovuCore } from "../core.js";
import { topicsList } from "../funcs/topicsList.js";
import { combineSignals } from "../lib/primitives.js";
import { RequestOptions } from "../lib/sdks.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";
import { useNovuContext } from "./_context.js";
import {
  QueryHookOptions,
  SuspenseQueryHookOptions,
  TupleToPrefixes,
} from "./_types.js";

export type TopicsListQueryData = operations.TopicsControllerListTopicsResponse;

/**
 * Get topic list filtered
 *
 * @remarks
 * Returns a list of topics that can be paginated using the `page` query parameter and filtered by the topic key with the `key` query parameter
 */
export function useTopicsList(
  request: operations.TopicsControllerListTopicsRequest,
  options?: QueryHookOptions<TopicsListQueryData>,
): UseQueryResult<TopicsListQueryData, Error> {
  const client = useNovuContext();
  return useQuery({
    ...buildTopicsListQuery(
      client,
      request,
      options,
    ),
    ...options,
  });
}

/**
 * Get topic list filtered
 *
 * @remarks
 * Returns a list of topics that can be paginated using the `page` query parameter and filtered by the topic key with the `key` query parameter
 */
export function useTopicsListSuspense(
  request: operations.TopicsControllerListTopicsRequest,
  options?: SuspenseQueryHookOptions<TopicsListQueryData>,
): UseSuspenseQueryResult<TopicsListQueryData, Error> {
  const client = useNovuContext();
  return useSuspenseQuery({
    ...buildTopicsListQuery(
      client,
      request,
      options,
    ),
    ...options,
  });
}

export function prefetchTopicsList(
  queryClient: QueryClient,
  client$: NovuCore,
  request: operations.TopicsControllerListTopicsRequest,
): Promise<void> {
  return queryClient.prefetchQuery({
    ...buildTopicsListQuery(
      client$,
      request,
    ),
  });
}

export function setTopicsListData(
  client: QueryClient,
  queryKeyBase: [
    parameters: {
      page?: number | undefined;
      pageSize?: number | undefined;
      key?: string | undefined;
      idempotencyKey?: string | undefined;
    },
  ],
  data: TopicsListQueryData,
): TopicsListQueryData | undefined {
  const key = queryKeyTopicsList(...queryKeyBase);

  return client.setQueryData<TopicsListQueryData>(key, data);
}

export function invalidateTopicsList(
  client: QueryClient,
  queryKeyBase: TupleToPrefixes<
    [parameters: {
      page?: number | undefined;
      pageSize?: number | undefined;
      key?: string | undefined;
      idempotencyKey?: string | undefined;
    }]
  >,
  filters?: Omit<InvalidateQueryFilters, "queryKey" | "predicate" | "exact">,
): Promise<void> {
  return client.invalidateQueries({
    ...filters,
    queryKey: ["@novu/api", "Topics", "list", ...queryKeyBase],
  });
}

export function invalidateAllTopicsList(
  client: QueryClient,
  filters?: Omit<InvalidateQueryFilters, "queryKey" | "predicate" | "exact">,
): Promise<void> {
  return client.invalidateQueries({
    ...filters,
    queryKey: ["@novu/api", "Topics", "list"],
  });
}

export function buildTopicsListQuery(
  client$: NovuCore,
  request: operations.TopicsControllerListTopicsRequest,
  options?: RequestOptions,
): {
  queryKey: QueryKey;
  queryFn: (context: QueryFunctionContext) => Promise<TopicsListQueryData>;
} {
  return {
    queryKey: queryKeyTopicsList({
      page: request.page,
      pageSize: request.pageSize,
      key: request.key,
      idempotencyKey: request.idempotencyKey,
    }),
    queryFn: async function topicsListQueryFn(
      ctx,
    ): Promise<TopicsListQueryData> {
      const sig = combineSignals(ctx.signal, options?.fetchOptions?.signal);
      const mergedOptions = {
        ...options,
        fetchOptions: { ...options?.fetchOptions, signal: sig },
      };

      return unwrapAsync(topicsList(
        client$,
        request,
        mergedOptions,
      ));
    },
  };
}

export function queryKeyTopicsList(
  parameters: {
    page?: number | undefined;
    pageSize?: number | undefined;
    key?: string | undefined;
    idempotencyKey?: string | undefined;
  },
): QueryKey {
  return ["@novu/api", "Topics", "list", parameters];
}
