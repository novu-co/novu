/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import {
  MutationKey,
  useMutation,
  UseMutationResult,
} from "@tanstack/react-query";
import { NovuCore } from "../core.js";
import { triggerBroadcast } from "../funcs/triggerBroadcast.js";
import { combineSignals } from "../lib/primitives.js";
import { RequestOptions } from "../lib/sdks.js";
import * as components from "../models/components/index.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";
import { useNovuContext } from "./_context.js";
import { MutationHookOptions } from "./_types.js";

export type TriggerBroadcastMutationVariables = {
  triggerEventToAllRequestDto: components.TriggerEventToAllRequestDto;
  idempotencyKey?: string | undefined;
  options?: RequestOptions;
};

export type TriggerBroadcastMutationData =
  operations.EventsControllerBroadcastEventToAllResponse;

/**
 * Broadcast event to all
 *
 * @remarks
 * Trigger a broadcast event to all existing subscribers, could be used to send announcements, etc.
 *       In the future could be used to trigger events to a subset of subscribers based on defined filters.
 */
export function useTriggerBroadcastMutation(
  options?: MutationHookOptions<
    TriggerBroadcastMutationData,
    Error,
    TriggerBroadcastMutationVariables
  >,
): UseMutationResult<
  TriggerBroadcastMutationData,
  Error,
  TriggerBroadcastMutationVariables
> {
  const client = useNovuContext();
  return useMutation({
    ...buildTriggerBroadcastMutation(client, options),
    ...options,
  });
}

export function mutationKeyTriggerBroadcast(): MutationKey {
  return ["@novu/api", "triggerBroadcast"];
}

export function buildTriggerBroadcastMutation(
  client$: NovuCore,
  hookOptions?: RequestOptions,
): {
  mutationKey: MutationKey;
  mutationFn: (
    variables: TriggerBroadcastMutationVariables,
  ) => Promise<TriggerBroadcastMutationData>;
} {
  return {
    mutationKey: mutationKeyTriggerBroadcast(),
    mutationFn: function triggerBroadcastMutationFn({
      triggerEventToAllRequestDto,
      idempotencyKey,
      options,
    }): Promise<TriggerBroadcastMutationData> {
      const mergedOptions = {
        ...hookOptions,
        ...options,
        fetchOptions: {
          ...hookOptions?.fetchOptions,
          ...options?.fetchOptions,
          signal: combineSignals(
            hookOptions?.fetchOptions?.signal,
            options?.fetchOptions?.signal,
          ),
        },
      };
      return unwrapAsync(triggerBroadcast(
        client$,
        triggerEventToAllRequestDto,
        idempotencyKey,
        mergedOptions,
      ));
    },
  };
}
