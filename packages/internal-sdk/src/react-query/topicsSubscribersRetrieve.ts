/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import {
  InvalidateQueryFilters,
  QueryClient,
  QueryFunctionContext,
  QueryKey,
  useQuery,
  UseQueryResult,
  useSuspenseQuery,
  UseSuspenseQueryResult,
} from "@tanstack/react-query";
import { NovuCore } from "../core.js";
import { topicsSubscribersRetrieve } from "../funcs/topicsSubscribersRetrieve.js";
import { combineSignals } from "../lib/primitives.js";
import { RequestOptions } from "../lib/sdks.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";
import { useNovuContext } from "./_context.js";
import {
  QueryHookOptions,
  SuspenseQueryHookOptions,
  TupleToPrefixes,
} from "./_types.js";

export type TopicsSubscribersRetrieveQueryData =
  operations.TopicsControllerGetTopicSubscriberResponse;

/**
 * Check topic subscriber
 *
 * @remarks
 * Check if a subscriber belongs to a certain topic
 */
export function useTopicsSubscribersRetrieve(
  topicKey: string,
  externalSubscriberId: string,
  idempotencyKey?: string | undefined,
  options?: QueryHookOptions<TopicsSubscribersRetrieveQueryData>,
): UseQueryResult<TopicsSubscribersRetrieveQueryData, Error> {
  const client = useNovuContext();
  return useQuery({
    ...buildTopicsSubscribersRetrieveQuery(
      client,
      topicKey,
      externalSubscriberId,
      idempotencyKey,
      options,
    ),
    ...options,
  });
}

/**
 * Check topic subscriber
 *
 * @remarks
 * Check if a subscriber belongs to a certain topic
 */
export function useTopicsSubscribersRetrieveSuspense(
  topicKey: string,
  externalSubscriberId: string,
  idempotencyKey?: string | undefined,
  options?: SuspenseQueryHookOptions<TopicsSubscribersRetrieveQueryData>,
): UseSuspenseQueryResult<TopicsSubscribersRetrieveQueryData, Error> {
  const client = useNovuContext();
  return useSuspenseQuery({
    ...buildTopicsSubscribersRetrieveQuery(
      client,
      topicKey,
      externalSubscriberId,
      idempotencyKey,
      options,
    ),
    ...options,
  });
}

export function prefetchTopicsSubscribersRetrieve(
  queryClient: QueryClient,
  client$: NovuCore,
  topicKey: string,
  externalSubscriberId: string,
  idempotencyKey?: string | undefined,
): Promise<void> {
  return queryClient.prefetchQuery({
    ...buildTopicsSubscribersRetrieveQuery(
      client$,
      topicKey,
      externalSubscriberId,
      idempotencyKey,
    ),
  });
}

export function setTopicsSubscribersRetrieveData(
  client: QueryClient,
  queryKeyBase: [
    topicKey: string,
    externalSubscriberId: string,
    parameters: { idempotencyKey?: string | undefined },
  ],
  data: TopicsSubscribersRetrieveQueryData,
): TopicsSubscribersRetrieveQueryData | undefined {
  const key = queryKeyTopicsSubscribersRetrieve(...queryKeyBase);

  return client.setQueryData<TopicsSubscribersRetrieveQueryData>(key, data);
}

export function invalidateTopicsSubscribersRetrieve(
  client: QueryClient,
  queryKeyBase: TupleToPrefixes<
    [
      topicKey: string,
      externalSubscriberId: string,
      parameters: { idempotencyKey?: string | undefined },
    ]
  >,
  filters?: Omit<InvalidateQueryFilters, "queryKey" | "predicate" | "exact">,
): Promise<void> {
  return client.invalidateQueries({
    ...filters,
    queryKey: ["@novu/api", "Subscribers", "retrieve", ...queryKeyBase],
  });
}

export function invalidateAllTopicsSubscribersRetrieve(
  client: QueryClient,
  filters?: Omit<InvalidateQueryFilters, "queryKey" | "predicate" | "exact">,
): Promise<void> {
  return client.invalidateQueries({
    ...filters,
    queryKey: ["@novu/api", "Subscribers", "retrieve"],
  });
}

export function buildTopicsSubscribersRetrieveQuery(
  client$: NovuCore,
  topicKey: string,
  externalSubscriberId: string,
  idempotencyKey?: string | undefined,
  options?: RequestOptions,
): {
  queryKey: QueryKey;
  queryFn: (
    context: QueryFunctionContext,
  ) => Promise<TopicsSubscribersRetrieveQueryData>;
} {
  return {
    queryKey: queryKeyTopicsSubscribersRetrieve(
      topicKey,
      externalSubscriberId,
      { idempotencyKey },
    ),
    queryFn: async function topicsSubscribersRetrieveQueryFn(
      ctx,
    ): Promise<TopicsSubscribersRetrieveQueryData> {
      const sig = combineSignals(ctx.signal, options?.fetchOptions?.signal);
      const mergedOptions = {
        ...options,
        fetchOptions: { ...options?.fetchOptions, signal: sig },
      };

      return unwrapAsync(topicsSubscribersRetrieve(
        client$,
        topicKey,
        externalSubscriberId,
        idempotencyKey,
        mergedOptions,
      ));
    },
  };
}

export function queryKeyTopicsSubscribersRetrieve(
  topicKey: string,
  externalSubscriberId: string,
  parameters: { idempotencyKey?: string | undefined },
): QueryKey {
  return [
    "@novu/api",
    "Subscribers",
    "retrieve",
    topicKey,
    externalSubscriberId,
    parameters,
  ];
}
