import { ApiProperty, ApiPropertyOptional } from '@nestjs/swagger';
import { UpdateSubscriberChannelRequestDto } from './update-subscriber-channel-request.dto';

export class ChannelSettings extends UpdateSubscriberChannelRequestDto {
  @ApiProperty({
    description: 'The unique identifier of the integration associated with this channel.',
    type: String,
  })
  _integrationId: string;
}
export class SubscriberFeedResponseDto {
  @ApiPropertyOptional({
    description:
      'The internal ID generated by Novu for your subscriber. ' +
      'This ID does not match the `subscriberId` used in your queries. Refer to `subscriberId` for that identifier.',
    type: String,
  })
  _id?: string;

  @ApiProperty({
    description: 'The first name of the subscriber.',
    type: String,
  })
  firstName?: string;

  @ApiProperty({
    description: 'The last name of the subscriber.',
    type: String,
  })
  lastName?: string;

  @ApiPropertyOptional({
    description: "The URL of the subscriber's avatar image.",
    type: String,
  })
  avatar?: string;

  @ApiProperty({
    description:
      'The identifier used to create this subscriber, which typically corresponds to the user ID in your system.',
    type: String,
  })
  subscriberId: string;
}

export class SubscriberResponseDto {
  @ApiPropertyOptional({
    description:
      'The internal ID generated by Novu for your subscriber. ' +
      'This ID does not match the `subscriberId` used in your queries. Refer to `subscriberId` for that identifier.',
    type: String,
  })
  _id?: string;

  @ApiProperty({
    description: 'The first name of the subscriber.',
    type: String,
  })
  firstName?: string;

  @ApiProperty({
    description: 'The last name of the subscriber.',
    type: String,
  })
  lastName?: string;

  @ApiProperty({
    description: 'The email address of the subscriber.',
    type: String,
    nullable: true,
  })
  email?: string | null;

  @ApiPropertyOptional({
    description: 'The phone number of the subscriber.',
    type: String,
  })
  phone?: string;

  @ApiPropertyOptional({
    description: "The URL of the subscriber's avatar image.",
    type: String,
  })
  avatar?: string;

  @ApiPropertyOptional({
    description: 'The locale setting of the subscriber, indicating their preferred language or region.',
    type: String,
  })
  locale?: string;

  @ApiProperty({
    description:
      'The identifier used to create this subscriber, which typically corresponds to the user ID in your system.',
    type: String,
  })
  subscriberId: string;

  @ApiPropertyOptional({
    type: [ChannelSettings],
    description: 'An array of channel settings associated with the subscriber.',
  })
  channels?: ChannelSettings[];

  @ApiPropertyOptional({
    description: 'An array of topics that the subscriber is subscribed to.',
    type: [String],
  })
  topics?: string[];

  @ApiProperty({
    description: 'Indicates whether the subscriber is currently online.',
    type: Boolean,
  })
  isOnline?: boolean;

  @ApiProperty({
    description: 'The timestamp indicating when the subscriber was last online, in ISO 8601 format.',
    type: String,
  })
  lastOnlineAt?: string;

  @ApiProperty({
    description: 'The unique identifier of the organization to which the subscriber belongs.',
    type: String,
  })
  _organizationId: string;

  @ApiProperty({
    description: 'The unique identifier of the environment associated with this subscriber.',
    type: String,
  })
  _environmentId: string;

  @ApiProperty({
    description: 'Indicates whether the subscriber has been deleted.',
    type: Boolean,
  })
  deleted: boolean;

  @ApiProperty({
    description: 'The timestamp indicating when the subscriber was created, in ISO 8601 format.',
    type: String,
  })
  createdAt: string;

  @ApiProperty({
    description: 'The timestamp indicating when the subscriber was last updated, in ISO 8601 format.',
    type: String,
  })
  updatedAt: string;

  @ApiPropertyOptional({
    description: 'The version of the subscriber document.',
    type: Number,
  })
  __v?: number;
}
