/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type WorkflowControllerPatchWorkflowRequest = {
  workflowId: string;
  /**
   * A header for idempotency purposes
   */
  idempotencyKey?: string | undefined;
};

export type WorkflowControllerPatchWorkflowResponseBody = {};

export type WorkflowControllerPatchWorkflowResponse = {
  headers: { [k: string]: Array<string> };
  result: WorkflowControllerPatchWorkflowResponseBody;
};

/** @internal */
export const WorkflowControllerPatchWorkflowRequest$inboundSchema: z.ZodType<
  WorkflowControllerPatchWorkflowRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  workflowId: z.string(),
  "idempotency-key": z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "idempotency-key": "idempotencyKey",
  });
});

/** @internal */
export type WorkflowControllerPatchWorkflowRequest$Outbound = {
  workflowId: string;
  "idempotency-key"?: string | undefined;
};

/** @internal */
export const WorkflowControllerPatchWorkflowRequest$outboundSchema: z.ZodType<
  WorkflowControllerPatchWorkflowRequest$Outbound,
  z.ZodTypeDef,
  WorkflowControllerPatchWorkflowRequest
> = z.object({
  workflowId: z.string(),
  idempotencyKey: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    idempotencyKey: "idempotency-key",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace WorkflowControllerPatchWorkflowRequest$ {
  /** @deprecated use `WorkflowControllerPatchWorkflowRequest$inboundSchema` instead. */
  export const inboundSchema =
    WorkflowControllerPatchWorkflowRequest$inboundSchema;
  /** @deprecated use `WorkflowControllerPatchWorkflowRequest$outboundSchema` instead. */
  export const outboundSchema =
    WorkflowControllerPatchWorkflowRequest$outboundSchema;
  /** @deprecated use `WorkflowControllerPatchWorkflowRequest$Outbound` instead. */
  export type Outbound = WorkflowControllerPatchWorkflowRequest$Outbound;
}

export function workflowControllerPatchWorkflowRequestToJSON(
  workflowControllerPatchWorkflowRequest:
    WorkflowControllerPatchWorkflowRequest,
): string {
  return JSON.stringify(
    WorkflowControllerPatchWorkflowRequest$outboundSchema.parse(
      workflowControllerPatchWorkflowRequest,
    ),
  );
}

export function workflowControllerPatchWorkflowRequestFromJSON(
  jsonString: string,
): SafeParseResult<WorkflowControllerPatchWorkflowRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      WorkflowControllerPatchWorkflowRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'WorkflowControllerPatchWorkflowRequest' from JSON`,
  );
}

/** @internal */
export const WorkflowControllerPatchWorkflowResponseBody$inboundSchema:
  z.ZodType<
    WorkflowControllerPatchWorkflowResponseBody,
    z.ZodTypeDef,
    unknown
  > = z.object({});

/** @internal */
export type WorkflowControllerPatchWorkflowResponseBody$Outbound = {};

/** @internal */
export const WorkflowControllerPatchWorkflowResponseBody$outboundSchema:
  z.ZodType<
    WorkflowControllerPatchWorkflowResponseBody$Outbound,
    z.ZodTypeDef,
    WorkflowControllerPatchWorkflowResponseBody
  > = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace WorkflowControllerPatchWorkflowResponseBody$ {
  /** @deprecated use `WorkflowControllerPatchWorkflowResponseBody$inboundSchema` instead. */
  export const inboundSchema =
    WorkflowControllerPatchWorkflowResponseBody$inboundSchema;
  /** @deprecated use `WorkflowControllerPatchWorkflowResponseBody$outboundSchema` instead. */
  export const outboundSchema =
    WorkflowControllerPatchWorkflowResponseBody$outboundSchema;
  /** @deprecated use `WorkflowControllerPatchWorkflowResponseBody$Outbound` instead. */
  export type Outbound = WorkflowControllerPatchWorkflowResponseBody$Outbound;
}

export function workflowControllerPatchWorkflowResponseBodyToJSON(
  workflowControllerPatchWorkflowResponseBody:
    WorkflowControllerPatchWorkflowResponseBody,
): string {
  return JSON.stringify(
    WorkflowControllerPatchWorkflowResponseBody$outboundSchema.parse(
      workflowControllerPatchWorkflowResponseBody,
    ),
  );
}

export function workflowControllerPatchWorkflowResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<
  WorkflowControllerPatchWorkflowResponseBody,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      WorkflowControllerPatchWorkflowResponseBody$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'WorkflowControllerPatchWorkflowResponseBody' from JSON`,
  );
}

/** @internal */
export const WorkflowControllerPatchWorkflowResponse$inboundSchema: z.ZodType<
  WorkflowControllerPatchWorkflowResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  Headers: z.record(z.array(z.string())),
  Result: z.lazy(() =>
    WorkflowControllerPatchWorkflowResponseBody$inboundSchema
  ),
}).transform((v) => {
  return remap$(v, {
    "Headers": "headers",
    "Result": "result",
  });
});

/** @internal */
export type WorkflowControllerPatchWorkflowResponse$Outbound = {
  Headers: { [k: string]: Array<string> };
  Result: WorkflowControllerPatchWorkflowResponseBody$Outbound;
};

/** @internal */
export const WorkflowControllerPatchWorkflowResponse$outboundSchema: z.ZodType<
  WorkflowControllerPatchWorkflowResponse$Outbound,
  z.ZodTypeDef,
  WorkflowControllerPatchWorkflowResponse
> = z.object({
  headers: z.record(z.array(z.string())),
  result: z.lazy(() =>
    WorkflowControllerPatchWorkflowResponseBody$outboundSchema
  ),
}).transform((v) => {
  return remap$(v, {
    headers: "Headers",
    result: "Result",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace WorkflowControllerPatchWorkflowResponse$ {
  /** @deprecated use `WorkflowControllerPatchWorkflowResponse$inboundSchema` instead. */
  export const inboundSchema =
    WorkflowControllerPatchWorkflowResponse$inboundSchema;
  /** @deprecated use `WorkflowControllerPatchWorkflowResponse$outboundSchema` instead. */
  export const outboundSchema =
    WorkflowControllerPatchWorkflowResponse$outboundSchema;
  /** @deprecated use `WorkflowControllerPatchWorkflowResponse$Outbound` instead. */
  export type Outbound = WorkflowControllerPatchWorkflowResponse$Outbound;
}

export function workflowControllerPatchWorkflowResponseToJSON(
  workflowControllerPatchWorkflowResponse:
    WorkflowControllerPatchWorkflowResponse,
): string {
  return JSON.stringify(
    WorkflowControllerPatchWorkflowResponse$outboundSchema.parse(
      workflowControllerPatchWorkflowResponse,
    ),
  );
}

export function workflowControllerPatchWorkflowResponseFromJSON(
  jsonString: string,
): SafeParseResult<
  WorkflowControllerPatchWorkflowResponse,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      WorkflowControllerPatchWorkflowResponse$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'WorkflowControllerPatchWorkflowResponse' from JSON`,
  );
}
