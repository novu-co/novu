/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type WorkflowControllerSyncRequest = {
  workflowId: string;
  /**
   * A header for idempotency purposes
   */
  idempotencyKey?: string | undefined;
};

export type WorkflowControllerSyncResponseBody = {};

export type WorkflowControllerSyncResponse = {
  headers: { [k: string]: Array<string> };
  result: WorkflowControllerSyncResponseBody;
};

/** @internal */
export const WorkflowControllerSyncRequest$inboundSchema: z.ZodType<
  WorkflowControllerSyncRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  workflowId: z.string(),
  "idempotency-key": z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "idempotency-key": "idempotencyKey",
  });
});

/** @internal */
export type WorkflowControllerSyncRequest$Outbound = {
  workflowId: string;
  "idempotency-key"?: string | undefined;
};

/** @internal */
export const WorkflowControllerSyncRequest$outboundSchema: z.ZodType<
  WorkflowControllerSyncRequest$Outbound,
  z.ZodTypeDef,
  WorkflowControllerSyncRequest
> = z.object({
  workflowId: z.string(),
  idempotencyKey: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    idempotencyKey: "idempotency-key",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace WorkflowControllerSyncRequest$ {
  /** @deprecated use `WorkflowControllerSyncRequest$inboundSchema` instead. */
  export const inboundSchema = WorkflowControllerSyncRequest$inboundSchema;
  /** @deprecated use `WorkflowControllerSyncRequest$outboundSchema` instead. */
  export const outboundSchema = WorkflowControllerSyncRequest$outboundSchema;
  /** @deprecated use `WorkflowControllerSyncRequest$Outbound` instead. */
  export type Outbound = WorkflowControllerSyncRequest$Outbound;
}

export function workflowControllerSyncRequestToJSON(
  workflowControllerSyncRequest: WorkflowControllerSyncRequest,
): string {
  return JSON.stringify(
    WorkflowControllerSyncRequest$outboundSchema.parse(
      workflowControllerSyncRequest,
    ),
  );
}

export function workflowControllerSyncRequestFromJSON(
  jsonString: string,
): SafeParseResult<WorkflowControllerSyncRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => WorkflowControllerSyncRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'WorkflowControllerSyncRequest' from JSON`,
  );
}

/** @internal */
export const WorkflowControllerSyncResponseBody$inboundSchema: z.ZodType<
  WorkflowControllerSyncResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type WorkflowControllerSyncResponseBody$Outbound = {};

/** @internal */
export const WorkflowControllerSyncResponseBody$outboundSchema: z.ZodType<
  WorkflowControllerSyncResponseBody$Outbound,
  z.ZodTypeDef,
  WorkflowControllerSyncResponseBody
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace WorkflowControllerSyncResponseBody$ {
  /** @deprecated use `WorkflowControllerSyncResponseBody$inboundSchema` instead. */
  export const inboundSchema = WorkflowControllerSyncResponseBody$inboundSchema;
  /** @deprecated use `WorkflowControllerSyncResponseBody$outboundSchema` instead. */
  export const outboundSchema =
    WorkflowControllerSyncResponseBody$outboundSchema;
  /** @deprecated use `WorkflowControllerSyncResponseBody$Outbound` instead. */
  export type Outbound = WorkflowControllerSyncResponseBody$Outbound;
}

export function workflowControllerSyncResponseBodyToJSON(
  workflowControllerSyncResponseBody: WorkflowControllerSyncResponseBody,
): string {
  return JSON.stringify(
    WorkflowControllerSyncResponseBody$outboundSchema.parse(
      workflowControllerSyncResponseBody,
    ),
  );
}

export function workflowControllerSyncResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<WorkflowControllerSyncResponseBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      WorkflowControllerSyncResponseBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'WorkflowControllerSyncResponseBody' from JSON`,
  );
}

/** @internal */
export const WorkflowControllerSyncResponse$inboundSchema: z.ZodType<
  WorkflowControllerSyncResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  Headers: z.record(z.array(z.string())),
  Result: z.lazy(() => WorkflowControllerSyncResponseBody$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "Headers": "headers",
    "Result": "result",
  });
});

/** @internal */
export type WorkflowControllerSyncResponse$Outbound = {
  Headers: { [k: string]: Array<string> };
  Result: WorkflowControllerSyncResponseBody$Outbound;
};

/** @internal */
export const WorkflowControllerSyncResponse$outboundSchema: z.ZodType<
  WorkflowControllerSyncResponse$Outbound,
  z.ZodTypeDef,
  WorkflowControllerSyncResponse
> = z.object({
  headers: z.record(z.array(z.string())),
  result: z.lazy(() => WorkflowControllerSyncResponseBody$outboundSchema),
}).transform((v) => {
  return remap$(v, {
    headers: "Headers",
    result: "Result",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace WorkflowControllerSyncResponse$ {
  /** @deprecated use `WorkflowControllerSyncResponse$inboundSchema` instead. */
  export const inboundSchema = WorkflowControllerSyncResponse$inboundSchema;
  /** @deprecated use `WorkflowControllerSyncResponse$outboundSchema` instead. */
  export const outboundSchema = WorkflowControllerSyncResponse$outboundSchema;
  /** @deprecated use `WorkflowControllerSyncResponse$Outbound` instead. */
  export type Outbound = WorkflowControllerSyncResponse$Outbound;
}

export function workflowControllerSyncResponseToJSON(
  workflowControllerSyncResponse: WorkflowControllerSyncResponse,
): string {
  return JSON.stringify(
    WorkflowControllerSyncResponse$outboundSchema.parse(
      workflowControllerSyncResponse,
    ),
  );
}

export function workflowControllerSyncResponseFromJSON(
  jsonString: string,
): SafeParseResult<WorkflowControllerSyncResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => WorkflowControllerSyncResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'WorkflowControllerSyncResponse' from JSON`,
  );
}
