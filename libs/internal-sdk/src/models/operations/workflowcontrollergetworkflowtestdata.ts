/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type WorkflowControllerGetWorkflowTestDataRequest = {
  workflowId: string;
  /**
   * A header for idempotency purposes
   */
  idempotencyKey?: string | undefined;
};

export type WorkflowControllerGetWorkflowTestDataResponseBody = {};

export type WorkflowControllerGetWorkflowTestDataResponse = {
  headers: { [k: string]: Array<string> };
  result: WorkflowControllerGetWorkflowTestDataResponseBody;
};

/** @internal */
export const WorkflowControllerGetWorkflowTestDataRequest$inboundSchema:
  z.ZodType<
    WorkflowControllerGetWorkflowTestDataRequest,
    z.ZodTypeDef,
    unknown
  > = z.object({
    workflowId: z.string(),
    "idempotency-key": z.string().optional(),
  }).transform((v) => {
    return remap$(v, {
      "idempotency-key": "idempotencyKey",
    });
  });

/** @internal */
export type WorkflowControllerGetWorkflowTestDataRequest$Outbound = {
  workflowId: string;
  "idempotency-key"?: string | undefined;
};

/** @internal */
export const WorkflowControllerGetWorkflowTestDataRequest$outboundSchema:
  z.ZodType<
    WorkflowControllerGetWorkflowTestDataRequest$Outbound,
    z.ZodTypeDef,
    WorkflowControllerGetWorkflowTestDataRequest
  > = z.object({
    workflowId: z.string(),
    idempotencyKey: z.string().optional(),
  }).transform((v) => {
    return remap$(v, {
      idempotencyKey: "idempotency-key",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace WorkflowControllerGetWorkflowTestDataRequest$ {
  /** @deprecated use `WorkflowControllerGetWorkflowTestDataRequest$inboundSchema` instead. */
  export const inboundSchema =
    WorkflowControllerGetWorkflowTestDataRequest$inboundSchema;
  /** @deprecated use `WorkflowControllerGetWorkflowTestDataRequest$outboundSchema` instead. */
  export const outboundSchema =
    WorkflowControllerGetWorkflowTestDataRequest$outboundSchema;
  /** @deprecated use `WorkflowControllerGetWorkflowTestDataRequest$Outbound` instead. */
  export type Outbound = WorkflowControllerGetWorkflowTestDataRequest$Outbound;
}

export function workflowControllerGetWorkflowTestDataRequestToJSON(
  workflowControllerGetWorkflowTestDataRequest:
    WorkflowControllerGetWorkflowTestDataRequest,
): string {
  return JSON.stringify(
    WorkflowControllerGetWorkflowTestDataRequest$outboundSchema.parse(
      workflowControllerGetWorkflowTestDataRequest,
    ),
  );
}

export function workflowControllerGetWorkflowTestDataRequestFromJSON(
  jsonString: string,
): SafeParseResult<
  WorkflowControllerGetWorkflowTestDataRequest,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      WorkflowControllerGetWorkflowTestDataRequest$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'WorkflowControllerGetWorkflowTestDataRequest' from JSON`,
  );
}

/** @internal */
export const WorkflowControllerGetWorkflowTestDataResponseBody$inboundSchema:
  z.ZodType<
    WorkflowControllerGetWorkflowTestDataResponseBody,
    z.ZodTypeDef,
    unknown
  > = z.object({});

/** @internal */
export type WorkflowControllerGetWorkflowTestDataResponseBody$Outbound = {};

/** @internal */
export const WorkflowControllerGetWorkflowTestDataResponseBody$outboundSchema:
  z.ZodType<
    WorkflowControllerGetWorkflowTestDataResponseBody$Outbound,
    z.ZodTypeDef,
    WorkflowControllerGetWorkflowTestDataResponseBody
  > = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace WorkflowControllerGetWorkflowTestDataResponseBody$ {
  /** @deprecated use `WorkflowControllerGetWorkflowTestDataResponseBody$inboundSchema` instead. */
  export const inboundSchema =
    WorkflowControllerGetWorkflowTestDataResponseBody$inboundSchema;
  /** @deprecated use `WorkflowControllerGetWorkflowTestDataResponseBody$outboundSchema` instead. */
  export const outboundSchema =
    WorkflowControllerGetWorkflowTestDataResponseBody$outboundSchema;
  /** @deprecated use `WorkflowControllerGetWorkflowTestDataResponseBody$Outbound` instead. */
  export type Outbound =
    WorkflowControllerGetWorkflowTestDataResponseBody$Outbound;
}

export function workflowControllerGetWorkflowTestDataResponseBodyToJSON(
  workflowControllerGetWorkflowTestDataResponseBody:
    WorkflowControllerGetWorkflowTestDataResponseBody,
): string {
  return JSON.stringify(
    WorkflowControllerGetWorkflowTestDataResponseBody$outboundSchema.parse(
      workflowControllerGetWorkflowTestDataResponseBody,
    ),
  );
}

export function workflowControllerGetWorkflowTestDataResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<
  WorkflowControllerGetWorkflowTestDataResponseBody,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      WorkflowControllerGetWorkflowTestDataResponseBody$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'WorkflowControllerGetWorkflowTestDataResponseBody' from JSON`,
  );
}

/** @internal */
export const WorkflowControllerGetWorkflowTestDataResponse$inboundSchema:
  z.ZodType<
    WorkflowControllerGetWorkflowTestDataResponse,
    z.ZodTypeDef,
    unknown
  > = z.object({
    Headers: z.record(z.array(z.string())),
    Result: z.lazy(() =>
      WorkflowControllerGetWorkflowTestDataResponseBody$inboundSchema
    ),
  }).transform((v) => {
    return remap$(v, {
      "Headers": "headers",
      "Result": "result",
    });
  });

/** @internal */
export type WorkflowControllerGetWorkflowTestDataResponse$Outbound = {
  Headers: { [k: string]: Array<string> };
  Result: WorkflowControllerGetWorkflowTestDataResponseBody$Outbound;
};

/** @internal */
export const WorkflowControllerGetWorkflowTestDataResponse$outboundSchema:
  z.ZodType<
    WorkflowControllerGetWorkflowTestDataResponse$Outbound,
    z.ZodTypeDef,
    WorkflowControllerGetWorkflowTestDataResponse
  > = z.object({
    headers: z.record(z.array(z.string())),
    result: z.lazy(() =>
      WorkflowControllerGetWorkflowTestDataResponseBody$outboundSchema
    ),
  }).transform((v) => {
    return remap$(v, {
      headers: "Headers",
      result: "Result",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace WorkflowControllerGetWorkflowTestDataResponse$ {
  /** @deprecated use `WorkflowControllerGetWorkflowTestDataResponse$inboundSchema` instead. */
  export const inboundSchema =
    WorkflowControllerGetWorkflowTestDataResponse$inboundSchema;
  /** @deprecated use `WorkflowControllerGetWorkflowTestDataResponse$outboundSchema` instead. */
  export const outboundSchema =
    WorkflowControllerGetWorkflowTestDataResponse$outboundSchema;
  /** @deprecated use `WorkflowControllerGetWorkflowTestDataResponse$Outbound` instead. */
  export type Outbound = WorkflowControllerGetWorkflowTestDataResponse$Outbound;
}

export function workflowControllerGetWorkflowTestDataResponseToJSON(
  workflowControllerGetWorkflowTestDataResponse:
    WorkflowControllerGetWorkflowTestDataResponse,
): string {
  return JSON.stringify(
    WorkflowControllerGetWorkflowTestDataResponse$outboundSchema.parse(
      workflowControllerGetWorkflowTestDataResponse,
    ),
  );
}

export function workflowControllerGetWorkflowTestDataResponseFromJSON(
  jsonString: string,
): SafeParseResult<
  WorkflowControllerGetWorkflowTestDataResponse,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      WorkflowControllerGetWorkflowTestDataResponse$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'WorkflowControllerGetWorkflowTestDataResponse' from JSON`,
  );
}
