/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import {
  MutationKey,
  useMutation,
  UseMutationResult,
} from "@tanstack/react-query";
import { NovuCore } from "../core.js";
import { workflowsWorkflowControllerPatchWorkflowStepData } from "../funcs/workflowsWorkflowControllerPatchWorkflowStepData.js";
import { combineSignals } from "../lib/primitives.js";
import { RequestOptions } from "../lib/sdks.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";
import { useNovuContext } from "./_context.js";
import { MutationHookOptions } from "./_types.js";

export type WorkflowsWorkflowControllerPatchWorkflowStepDataMutationVariables =
  {
    workflowId: string;
    stepId: string;
    idempotencyKey?: string | undefined;
    options?: RequestOptions;
  };

export type WorkflowsWorkflowControllerPatchWorkflowStepDataMutationData =
  operations.WorkflowControllerPatchWorkflowStepDataResponse;

export function useWorkflowsWorkflowControllerPatchWorkflowStepDataMutation(
  options?: MutationHookOptions<
    WorkflowsWorkflowControllerPatchWorkflowStepDataMutationData,
    Error,
    WorkflowsWorkflowControllerPatchWorkflowStepDataMutationVariables
  >,
): UseMutationResult<
  WorkflowsWorkflowControllerPatchWorkflowStepDataMutationData,
  Error,
  WorkflowsWorkflowControllerPatchWorkflowStepDataMutationVariables
> {
  const client = useNovuContext();
  return useMutation({
    ...buildWorkflowsWorkflowControllerPatchWorkflowStepDataMutation(
      client,
      options,
    ),
    ...options,
  });
}

export function mutationKeyWorkflowsWorkflowControllerPatchWorkflowStepData(): MutationKey {
  return ["@novu/api", "Workflows", "workflowControllerPatchWorkflowStepData"];
}

export function buildWorkflowsWorkflowControllerPatchWorkflowStepDataMutation(
  client$: NovuCore,
  hookOptions?: RequestOptions,
): {
  mutationKey: MutationKey;
  mutationFn: (
    variables:
      WorkflowsWorkflowControllerPatchWorkflowStepDataMutationVariables,
  ) => Promise<WorkflowsWorkflowControllerPatchWorkflowStepDataMutationData>;
} {
  return {
    mutationKey: mutationKeyWorkflowsWorkflowControllerPatchWorkflowStepData(),
    mutationFn:
      function workflowsWorkflowControllerPatchWorkflowStepDataMutationFn({
        workflowId,
        stepId,
        idempotencyKey,
        options,
      }): Promise<
        WorkflowsWorkflowControllerPatchWorkflowStepDataMutationData
      > {
        const mergedOptions = {
          ...hookOptions,
          ...options,
          fetchOptions: {
            ...hookOptions?.fetchOptions,
            ...options?.fetchOptions,
            signal: combineSignals(
              hookOptions?.fetchOptions?.signal,
              options?.fetchOptions?.signal,
            ),
          },
        };
        return unwrapAsync(workflowsWorkflowControllerPatchWorkflowStepData(
          client$,
          workflowId,
          stepId,
          idempotencyKey,
          mergedOptions,
        ));
      },
  };
}
