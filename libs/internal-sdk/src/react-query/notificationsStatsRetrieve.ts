/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import {
  InvalidateQueryFilters,
  QueryClient,
  QueryFunctionContext,
  QueryKey,
  useQuery,
  UseQueryResult,
  useSuspenseQuery,
  UseSuspenseQueryResult,
} from "@tanstack/react-query";
import { NovuCore } from "../core.js";
import { notificationsStatsRetrieve } from "../funcs/notificationsStatsRetrieve.js";
import { combineSignals } from "../lib/primitives.js";
import { RequestOptions } from "../lib/sdks.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";
import { useNovuContext } from "./_context.js";
import {
  QueryHookOptions,
  SuspenseQueryHookOptions,
  TupleToPrefixes,
} from "./_types.js";

export type NotificationsStatsRetrieveQueryData =
  operations.NotificationsControllerGetActivityStatsResponse;

/**
 * Get notification statistics
 */
export function useNotificationsStatsRetrieve(
  idempotencyKey?: string | undefined,
  options?: QueryHookOptions<NotificationsStatsRetrieveQueryData>,
): UseQueryResult<NotificationsStatsRetrieveQueryData, Error> {
  const client = useNovuContext();
  return useQuery({
    ...buildNotificationsStatsRetrieveQuery(
      client,
      idempotencyKey,
      options,
    ),
    ...options,
  });
}

/**
 * Get notification statistics
 */
export function useNotificationsStatsRetrieveSuspense(
  idempotencyKey?: string | undefined,
  options?: SuspenseQueryHookOptions<NotificationsStatsRetrieveQueryData>,
): UseSuspenseQueryResult<NotificationsStatsRetrieveQueryData, Error> {
  const client = useNovuContext();
  return useSuspenseQuery({
    ...buildNotificationsStatsRetrieveQuery(
      client,
      idempotencyKey,
      options,
    ),
    ...options,
  });
}

export function prefetchNotificationsStatsRetrieve(
  queryClient: QueryClient,
  client$: NovuCore,
  idempotencyKey?: string | undefined,
): Promise<void> {
  return queryClient.prefetchQuery({
    ...buildNotificationsStatsRetrieveQuery(
      client$,
      idempotencyKey,
    ),
  });
}

export function setNotificationsStatsRetrieveData(
  client: QueryClient,
  queryKeyBase: [parameters: { idempotencyKey?: string | undefined }],
  data: NotificationsStatsRetrieveQueryData,
): NotificationsStatsRetrieveQueryData | undefined {
  const key = queryKeyNotificationsStatsRetrieve(...queryKeyBase);

  return client.setQueryData<NotificationsStatsRetrieveQueryData>(key, data);
}

export function invalidateNotificationsStatsRetrieve(
  client: QueryClient,
  queryKeyBase: TupleToPrefixes<
    [parameters: { idempotencyKey?: string | undefined }]
  >,
  filters?: Omit<InvalidateQueryFilters, "queryKey" | "predicate" | "exact">,
): Promise<void> {
  return client.invalidateQueries({
    ...filters,
    queryKey: ["@novu/api", "Stats", "retrieve", ...queryKeyBase],
  });
}

export function invalidateAllNotificationsStatsRetrieve(
  client: QueryClient,
  filters?: Omit<InvalidateQueryFilters, "queryKey" | "predicate" | "exact">,
): Promise<void> {
  return client.invalidateQueries({
    ...filters,
    queryKey: ["@novu/api", "Stats", "retrieve"],
  });
}

export function buildNotificationsStatsRetrieveQuery(
  client$: NovuCore,
  idempotencyKey?: string | undefined,
  options?: RequestOptions,
): {
  queryKey: QueryKey;
  queryFn: (
    context: QueryFunctionContext,
  ) => Promise<NotificationsStatsRetrieveQueryData>;
} {
  return {
    queryKey: queryKeyNotificationsStatsRetrieve({ idempotencyKey }),
    queryFn: async function notificationsStatsRetrieveQueryFn(
      ctx,
    ): Promise<NotificationsStatsRetrieveQueryData> {
      const sig = combineSignals(ctx.signal, options?.fetchOptions?.signal);
      const mergedOptions = {
        ...options,
        fetchOptions: { ...options?.fetchOptions, signal: sig },
      };

      return unwrapAsync(notificationsStatsRetrieve(
        client$,
        idempotencyKey,
        mergedOptions,
      ));
    },
  };
}

export function queryKeyNotificationsStatsRetrieve(
  parameters: { idempotencyKey?: string | undefined },
): QueryKey {
  return ["@novu/api", "Stats", "retrieve", parameters];
}
