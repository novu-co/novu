/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import {
  InvalidateQueryFilters,
  QueryClient,
  QueryFunctionContext,
  QueryKey,
  useQuery,
  UseQueryResult,
  useSuspenseQuery,
  UseSuspenseQueryResult,
} from "@tanstack/react-query";
import { NovuCore } from "../core.js";
import { messagesRetrieve } from "../funcs/messagesRetrieve.js";
import { combineSignals } from "../lib/primitives.js";
import { RequestOptions } from "../lib/sdks.js";
import * as components from "../models/components/index.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";
import { useNovuContext } from "./_context.js";
import {
  QueryHookOptions,
  SuspenseQueryHookOptions,
  TupleToPrefixes,
} from "./_types.js";

export type MessagesRetrieveQueryData =
  operations.MessagesControllerGetMessagesResponse;

/**
 * Get messages
 *
 * @remarks
 * Returns a list of messages, could paginate using the `page` query parameter
 */
export function useMessagesRetrieve(
  request: operations.MessagesControllerGetMessagesRequest,
  options?: QueryHookOptions<MessagesRetrieveQueryData>,
): UseQueryResult<MessagesRetrieveQueryData, Error> {
  const client = useNovuContext();
  return useQuery({
    ...buildMessagesRetrieveQuery(
      client,
      request,
      options,
    ),
    ...options,
  });
}

/**
 * Get messages
 *
 * @remarks
 * Returns a list of messages, could paginate using the `page` query parameter
 */
export function useMessagesRetrieveSuspense(
  request: operations.MessagesControllerGetMessagesRequest,
  options?: SuspenseQueryHookOptions<MessagesRetrieveQueryData>,
): UseSuspenseQueryResult<MessagesRetrieveQueryData, Error> {
  const client = useNovuContext();
  return useSuspenseQuery({
    ...buildMessagesRetrieveQuery(
      client,
      request,
      options,
    ),
    ...options,
  });
}

export function prefetchMessagesRetrieve(
  queryClient: QueryClient,
  client$: NovuCore,
  request: operations.MessagesControllerGetMessagesRequest,
): Promise<void> {
  return queryClient.prefetchQuery({
    ...buildMessagesRetrieveQuery(
      client$,
      request,
    ),
  });
}

export function setMessagesRetrieveData(
  client: QueryClient,
  queryKeyBase: [
    parameters: {
      channel?: components.ChannelTypeEnum | undefined;
      subscriberId?: string | undefined;
      transactionId?: Array<string> | undefined;
      page?: number | undefined;
      limit?: number | undefined;
      idempotencyKey?: string | undefined;
    },
  ],
  data: MessagesRetrieveQueryData,
): MessagesRetrieveQueryData | undefined {
  const key = queryKeyMessagesRetrieve(...queryKeyBase);

  return client.setQueryData<MessagesRetrieveQueryData>(key, data);
}

export function invalidateMessagesRetrieve(
  client: QueryClient,
  queryKeyBase: TupleToPrefixes<
    [parameters: {
      channel?: components.ChannelTypeEnum | undefined;
      subscriberId?: string | undefined;
      transactionId?: Array<string> | undefined;
      page?: number | undefined;
      limit?: number | undefined;
      idempotencyKey?: string | undefined;
    }]
  >,
  filters?: Omit<InvalidateQueryFilters, "queryKey" | "predicate" | "exact">,
): Promise<void> {
  return client.invalidateQueries({
    ...filters,
    queryKey: ["@novu/api", "Messages", "retrieve", ...queryKeyBase],
  });
}

export function invalidateAllMessagesRetrieve(
  client: QueryClient,
  filters?: Omit<InvalidateQueryFilters, "queryKey" | "predicate" | "exact">,
): Promise<void> {
  return client.invalidateQueries({
    ...filters,
    queryKey: ["@novu/api", "Messages", "retrieve"],
  });
}

export function buildMessagesRetrieveQuery(
  client$: NovuCore,
  request: operations.MessagesControllerGetMessagesRequest,
  options?: RequestOptions,
): {
  queryKey: QueryKey;
  queryFn: (
    context: QueryFunctionContext,
  ) => Promise<MessagesRetrieveQueryData>;
} {
  return {
    queryKey: queryKeyMessagesRetrieve({
      channel: request.channel,
      subscriberId: request.subscriberId,
      transactionId: request.transactionId,
      page: request.page,
      limit: request.limit,
      idempotencyKey: request.idempotencyKey,
    }),
    queryFn: async function messagesRetrieveQueryFn(
      ctx,
    ): Promise<MessagesRetrieveQueryData> {
      const sig = combineSignals(ctx.signal, options?.fetchOptions?.signal);
      const mergedOptions = {
        ...options,
        fetchOptions: { ...options?.fetchOptions, signal: sig },
      };

      return unwrapAsync(messagesRetrieve(
        client$,
        request,
        mergedOptions,
      ));
    },
  };
}

export function queryKeyMessagesRetrieve(
  parameters: {
    channel?: components.ChannelTypeEnum | undefined;
    subscriberId?: string | undefined;
    transactionId?: Array<string> | undefined;
    page?: number | undefined;
    limit?: number | undefined;
    idempotencyKey?: string | undefined;
  },
): QueryKey {
  return ["@novu/api", "Messages", "retrieve", parameters];
}
