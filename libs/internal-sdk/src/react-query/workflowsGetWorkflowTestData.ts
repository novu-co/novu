/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import {
  InvalidateQueryFilters,
  QueryClient,
  QueryFunctionContext,
  QueryKey,
  useQuery,
  UseQueryResult,
  useSuspenseQuery,
  UseSuspenseQueryResult,
} from "@tanstack/react-query";
import { NovuCore } from "../core.js";
import { workflowsGetWorkflowTestData } from "../funcs/workflowsGetWorkflowTestData.js";
import { combineSignals } from "../lib/primitives.js";
import { RequestOptions } from "../lib/sdks.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";
import { useNovuContext } from "./_context.js";
import {
  QueryHookOptions,
  SuspenseQueryHookOptions,
  TupleToPrefixes,
} from "./_types.js";

export type WorkflowsGetWorkflowTestDataQueryData =
  operations.WorkflowControllerGetWorkflowTestDataResponse;

export function useWorkflowsGetWorkflowTestData(
  workflowId: string,
  idempotencyKey?: string | undefined,
  options?: QueryHookOptions<WorkflowsGetWorkflowTestDataQueryData>,
): UseQueryResult<WorkflowsGetWorkflowTestDataQueryData, Error> {
  const client = useNovuContext();
  return useQuery({
    ...buildWorkflowsGetWorkflowTestDataQuery(
      client,
      workflowId,
      idempotencyKey,
      options,
    ),
    ...options,
  });
}

export function useWorkflowsGetWorkflowTestDataSuspense(
  workflowId: string,
  idempotencyKey?: string | undefined,
  options?: SuspenseQueryHookOptions<WorkflowsGetWorkflowTestDataQueryData>,
): UseSuspenseQueryResult<WorkflowsGetWorkflowTestDataQueryData, Error> {
  const client = useNovuContext();
  return useSuspenseQuery({
    ...buildWorkflowsGetWorkflowTestDataQuery(
      client,
      workflowId,
      idempotencyKey,
      options,
    ),
    ...options,
  });
}

export function prefetchWorkflowsGetWorkflowTestData(
  queryClient: QueryClient,
  client$: NovuCore,
  workflowId: string,
  idempotencyKey?: string | undefined,
): Promise<void> {
  return queryClient.prefetchQuery({
    ...buildWorkflowsGetWorkflowTestDataQuery(
      client$,
      workflowId,
      idempotencyKey,
    ),
  });
}

export function setWorkflowsGetWorkflowTestDataData(
  client: QueryClient,
  queryKeyBase: [
    workflowId: string,
    parameters: { idempotencyKey?: string | undefined },
  ],
  data: WorkflowsGetWorkflowTestDataQueryData,
): WorkflowsGetWorkflowTestDataQueryData | undefined {
  const key = queryKeyWorkflowsGetWorkflowTestData(...queryKeyBase);

  return client.setQueryData<WorkflowsGetWorkflowTestDataQueryData>(key, data);
}

export function invalidateWorkflowsGetWorkflowTestData(
  client: QueryClient,
  queryKeyBase: TupleToPrefixes<
    [workflowId: string, parameters: { idempotencyKey?: string | undefined }]
  >,
  filters?: Omit<InvalidateQueryFilters, "queryKey" | "predicate" | "exact">,
): Promise<void> {
  return client.invalidateQueries({
    ...filters,
    queryKey: [
      "@novu/api",
      "Workflows",
      "getWorkflowTestData",
      ...queryKeyBase,
    ],
  });
}

export function invalidateAllWorkflowsGetWorkflowTestData(
  client: QueryClient,
  filters?: Omit<InvalidateQueryFilters, "queryKey" | "predicate" | "exact">,
): Promise<void> {
  return client.invalidateQueries({
    ...filters,
    queryKey: ["@novu/api", "Workflows", "getWorkflowTestData"],
  });
}

export function buildWorkflowsGetWorkflowTestDataQuery(
  client$: NovuCore,
  workflowId: string,
  idempotencyKey?: string | undefined,
  options?: RequestOptions,
): {
  queryKey: QueryKey;
  queryFn: (
    context: QueryFunctionContext,
  ) => Promise<WorkflowsGetWorkflowTestDataQueryData>;
} {
  return {
    queryKey: queryKeyWorkflowsGetWorkflowTestData(workflowId, {
      idempotencyKey,
    }),
    queryFn: async function workflowsGetWorkflowTestDataQueryFn(
      ctx,
    ): Promise<WorkflowsGetWorkflowTestDataQueryData> {
      const sig = combineSignals(ctx.signal, options?.fetchOptions?.signal);
      const mergedOptions = {
        ...options,
        fetchOptions: { ...options?.fetchOptions, signal: sig },
      };

      return unwrapAsync(workflowsGetWorkflowTestData(
        client$,
        workflowId,
        idempotencyKey,
        mergedOptions,
      ));
    },
  };
}

export function queryKeyWorkflowsGetWorkflowTestData(
  workflowId: string,
  parameters: { idempotencyKey?: string | undefined },
): QueryKey {
  return [
    "@novu/api",
    "Workflows",
    "getWorkflowTestData",
    workflowId,
    parameters,
  ];
}
