/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import {
  MutationKey,
  useMutation,
  UseMutationResult,
} from "@tanstack/react-query";
import { NovuCore } from "../core.js";
import { trigger } from "../funcs/trigger.js";
import { combineSignals } from "../lib/primitives.js";
import { RequestOptions } from "../lib/sdks.js";
import * as components from "../models/components/index.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";
import { useNovuContext } from "./_context.js";
import { MutationHookOptions } from "./_types.js";

export type TriggerMutationVariables = {
  triggerEventRequestDto: components.TriggerEventRequestDto;
  idempotencyKey?: string | undefined;
  options?: RequestOptions;
};

export type TriggerMutationData = operations.EventsControllerTriggerResponse;

/**
 * Trigger event
 *
 * @remarks
 *
 *     Trigger event is the main (and only) way to send notifications to subscribers.
 *     The trigger identifier is used to match the particular workflow associated with it.
 *     Additional information can be passed according the body interface below.
 */
export function useTriggerMutation(
  options?: MutationHookOptions<
    TriggerMutationData,
    Error,
    TriggerMutationVariables
  >,
): UseMutationResult<TriggerMutationData, Error, TriggerMutationVariables> {
  const client = useNovuContext();
  return useMutation({
    ...buildTriggerMutation(client, options),
    ...options,
  });
}

export function mutationKeyTrigger(): MutationKey {
  return ["@novu/api", "trigger"];
}

export function buildTriggerMutation(
  client$: NovuCore,
  hookOptions?: RequestOptions,
): {
  mutationKey: MutationKey;
  mutationFn: (
    variables: TriggerMutationVariables,
  ) => Promise<TriggerMutationData>;
} {
  return {
    mutationKey: mutationKeyTrigger(),
    mutationFn: function triggerMutationFn({
      triggerEventRequestDto,
      idempotencyKey,
      options,
    }): Promise<TriggerMutationData> {
      const mergedOptions = {
        ...hookOptions,
        ...options,
        fetchOptions: {
          ...hookOptions?.fetchOptions,
          ...options?.fetchOptions,
          signal: combineSignals(
            hookOptions?.fetchOptions?.signal,
            options?.fetchOptions?.signal,
          ),
        },
      };
      return unwrapAsync(trigger(
        client$,
        triggerEventRequestDto,
        idempotencyKey,
        mergedOptions,
      ));
    },
  };
}
