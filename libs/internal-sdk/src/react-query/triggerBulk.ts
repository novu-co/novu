/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import {
  MutationKey,
  useMutation,
  UseMutationResult,
} from "@tanstack/react-query";
import { NovuCore } from "../core.js";
import { triggerBulk } from "../funcs/triggerBulk.js";
import { combineSignals } from "../lib/primitives.js";
import { RequestOptions } from "../lib/sdks.js";
import * as components from "../models/components/index.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";
import { useNovuContext } from "./_context.js";
import { MutationHookOptions } from "./_types.js";

export type TriggerBulkMutationVariables = {
  bulkTriggerEventDto: components.BulkTriggerEventDto;
  idempotencyKey?: string | undefined;
  options?: RequestOptions;
};

export type TriggerBulkMutationData =
  operations.EventsControllerTriggerBulkResponse;

/**
 * Bulk trigger event
 *
 * @remarks
 *
 *       Using this endpoint you can trigger multiple events at once, to avoid multiple calls to the API.
 *       The bulk API is limited to 100 events per request.
 */
export function useTriggerBulkMutation(
  options?: MutationHookOptions<
    TriggerBulkMutationData,
    Error,
    TriggerBulkMutationVariables
  >,
): UseMutationResult<
  TriggerBulkMutationData,
  Error,
  TriggerBulkMutationVariables
> {
  const client = useNovuContext();
  return useMutation({
    ...buildTriggerBulkMutation(client, options),
    ...options,
  });
}

export function mutationKeyTriggerBulk(): MutationKey {
  return ["@novu/api", "triggerBulk"];
}

export function buildTriggerBulkMutation(
  client$: NovuCore,
  hookOptions?: RequestOptions,
): {
  mutationKey: MutationKey;
  mutationFn: (
    variables: TriggerBulkMutationVariables,
  ) => Promise<TriggerBulkMutationData>;
} {
  return {
    mutationKey: mutationKeyTriggerBulk(),
    mutationFn: function triggerBulkMutationFn({
      bulkTriggerEventDto,
      idempotencyKey,
      options,
    }): Promise<TriggerBulkMutationData> {
      const mergedOptions = {
        ...hookOptions,
        ...options,
        fetchOptions: {
          ...hookOptions?.fetchOptions,
          ...options?.fetchOptions,
          signal: combineSignals(
            hookOptions?.fetchOptions?.signal,
            options?.fetchOptions?.signal,
          ),
        },
      };
      return unwrapAsync(triggerBulk(
        client$,
        bulkTriggerEventDto,
        idempotencyKey,
        mergedOptions,
      ));
    },
  };
}
