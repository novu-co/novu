/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import {
  InvalidateQueryFilters,
  QueryClient,
  QueryFunctionContext,
  QueryKey,
  useQuery,
  UseQueryResult,
  useSuspenseQuery,
  UseSuspenseQueryResult,
} from "@tanstack/react-query";
import { NovuCore } from "../core.js";
import { notificationsStatsGraph } from "../funcs/notificationsStatsGraph.js";
import { combineSignals } from "../lib/primitives.js";
import { RequestOptions } from "../lib/sdks.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";
import { useNovuContext } from "./_context.js";
import {
  QueryHookOptions,
  SuspenseQueryHookOptions,
  TupleToPrefixes,
} from "./_types.js";

export type NotificationsStatsGraphQueryData =
  operations.NotificationsControllerGetActivityGraphStatsResponse;

/**
 * Get notification graph statistics
 */
export function useNotificationsStatsGraph(
  days?: number | undefined,
  idempotencyKey?: string | undefined,
  options?: QueryHookOptions<NotificationsStatsGraphQueryData>,
): UseQueryResult<NotificationsStatsGraphQueryData, Error> {
  const client = useNovuContext();
  return useQuery({
    ...buildNotificationsStatsGraphQuery(
      client,
      days,
      idempotencyKey,
      options,
    ),
    ...options,
  });
}

/**
 * Get notification graph statistics
 */
export function useNotificationsStatsGraphSuspense(
  days?: number | undefined,
  idempotencyKey?: string | undefined,
  options?: SuspenseQueryHookOptions<NotificationsStatsGraphQueryData>,
): UseSuspenseQueryResult<NotificationsStatsGraphQueryData, Error> {
  const client = useNovuContext();
  return useSuspenseQuery({
    ...buildNotificationsStatsGraphQuery(
      client,
      days,
      idempotencyKey,
      options,
    ),
    ...options,
  });
}

export function prefetchNotificationsStatsGraph(
  queryClient: QueryClient,
  client$: NovuCore,
  days?: number | undefined,
  idempotencyKey?: string | undefined,
): Promise<void> {
  return queryClient.prefetchQuery({
    ...buildNotificationsStatsGraphQuery(
      client$,
      days,
      idempotencyKey,
    ),
  });
}

export function setNotificationsStatsGraphData(
  client: QueryClient,
  queryKeyBase: [
    parameters: {
      days?: number | undefined;
      idempotencyKey?: string | undefined;
    },
  ],
  data: NotificationsStatsGraphQueryData,
): NotificationsStatsGraphQueryData | undefined {
  const key = queryKeyNotificationsStatsGraph(...queryKeyBase);

  return client.setQueryData<NotificationsStatsGraphQueryData>(key, data);
}

export function invalidateNotificationsStatsGraph(
  client: QueryClient,
  queryKeyBase: TupleToPrefixes<
    [parameters: {
      days?: number | undefined;
      idempotencyKey?: string | undefined;
    }]
  >,
  filters?: Omit<InvalidateQueryFilters, "queryKey" | "predicate" | "exact">,
): Promise<void> {
  return client.invalidateQueries({
    ...filters,
    queryKey: ["@novu/api", "Stats", "graph", ...queryKeyBase],
  });
}

export function invalidateAllNotificationsStatsGraph(
  client: QueryClient,
  filters?: Omit<InvalidateQueryFilters, "queryKey" | "predicate" | "exact">,
): Promise<void> {
  return client.invalidateQueries({
    ...filters,
    queryKey: ["@novu/api", "Stats", "graph"],
  });
}

export function buildNotificationsStatsGraphQuery(
  client$: NovuCore,
  days?: number | undefined,
  idempotencyKey?: string | undefined,
  options?: RequestOptions,
): {
  queryKey: QueryKey;
  queryFn: (
    context: QueryFunctionContext,
  ) => Promise<NotificationsStatsGraphQueryData>;
} {
  return {
    queryKey: queryKeyNotificationsStatsGraph({ days, idempotencyKey }),
    queryFn: async function notificationsStatsGraphQueryFn(
      ctx,
    ): Promise<NotificationsStatsGraphQueryData> {
      const sig = combineSignals(ctx.signal, options?.fetchOptions?.signal);
      const mergedOptions = {
        ...options,
        fetchOptions: { ...options?.fetchOptions, signal: sig },
      };

      return unwrapAsync(notificationsStatsGraph(
        client$,
        days,
        idempotencyKey,
        mergedOptions,
      ));
    },
  };
}

export function queryKeyNotificationsStatsGraph(
  parameters: {
    days?: number | undefined;
    idempotencyKey?: string | undefined;
  },
): QueryKey {
  return ["@novu/api", "Stats", "graph", parameters];
}
