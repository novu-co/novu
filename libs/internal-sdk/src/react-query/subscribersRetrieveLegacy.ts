/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import {
  InvalidateQueryFilters,
  QueryClient,
  QueryFunctionContext,
  QueryKey,
  useQuery,
  UseQueryResult,
  useSuspenseQuery,
  UseSuspenseQueryResult,
} from "@tanstack/react-query";
import { NovuCore } from "../core.js";
import { subscribersRetrieveLegacy } from "../funcs/subscribersRetrieveLegacy.js";
import { combineSignals } from "../lib/primitives.js";
import { RequestOptions } from "../lib/sdks.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";
import { useNovuContext } from "./_context.js";
import {
  QueryHookOptions,
  SuspenseQueryHookOptions,
  TupleToPrefixes,
} from "./_types.js";

export type SubscribersRetrieveLegacyQueryData =
  operations.SubscribersV1ControllerGetSubscriberResponse;

/**
 * Get subscriber
 *
 * @remarks
 * Get subscriber by your internal id used to identify the subscriber
 */
export function useSubscribersRetrieveLegacy(
  subscriberId: string,
  includeTopics?: boolean | undefined,
  idempotencyKey?: string | undefined,
  options?: QueryHookOptions<SubscribersRetrieveLegacyQueryData>,
): UseQueryResult<SubscribersRetrieveLegacyQueryData, Error> {
  const client = useNovuContext();
  return useQuery({
    ...buildSubscribersRetrieveLegacyQuery(
      client,
      subscriberId,
      includeTopics,
      idempotencyKey,
      options,
    ),
    ...options,
  });
}

/**
 * Get subscriber
 *
 * @remarks
 * Get subscriber by your internal id used to identify the subscriber
 */
export function useSubscribersRetrieveLegacySuspense(
  subscriberId: string,
  includeTopics?: boolean | undefined,
  idempotencyKey?: string | undefined,
  options?: SuspenseQueryHookOptions<SubscribersRetrieveLegacyQueryData>,
): UseSuspenseQueryResult<SubscribersRetrieveLegacyQueryData, Error> {
  const client = useNovuContext();
  return useSuspenseQuery({
    ...buildSubscribersRetrieveLegacyQuery(
      client,
      subscriberId,
      includeTopics,
      idempotencyKey,
      options,
    ),
    ...options,
  });
}

export function prefetchSubscribersRetrieveLegacy(
  queryClient: QueryClient,
  client$: NovuCore,
  subscriberId: string,
  includeTopics?: boolean | undefined,
  idempotencyKey?: string | undefined,
): Promise<void> {
  return queryClient.prefetchQuery({
    ...buildSubscribersRetrieveLegacyQuery(
      client$,
      subscriberId,
      includeTopics,
      idempotencyKey,
    ),
  });
}

export function setSubscribersRetrieveLegacyData(
  client: QueryClient,
  queryKeyBase: [
    subscriberId: string,
    parameters: {
      includeTopics?: boolean | undefined;
      idempotencyKey?: string | undefined;
    },
  ],
  data: SubscribersRetrieveLegacyQueryData,
): SubscribersRetrieveLegacyQueryData | undefined {
  const key = queryKeySubscribersRetrieveLegacy(...queryKeyBase);

  return client.setQueryData<SubscribersRetrieveLegacyQueryData>(key, data);
}

export function invalidateSubscribersRetrieveLegacy(
  client: QueryClient,
  queryKeyBase: TupleToPrefixes<
    [
      subscriberId: string,
      parameters: {
        includeTopics?: boolean | undefined;
        idempotencyKey?: string | undefined;
      },
    ]
  >,
  filters?: Omit<InvalidateQueryFilters, "queryKey" | "predicate" | "exact">,
): Promise<void> {
  return client.invalidateQueries({
    ...filters,
    queryKey: ["@novu/api", "Subscribers", "retrieveLegacy", ...queryKeyBase],
  });
}

export function invalidateAllSubscribersRetrieveLegacy(
  client: QueryClient,
  filters?: Omit<InvalidateQueryFilters, "queryKey" | "predicate" | "exact">,
): Promise<void> {
  return client.invalidateQueries({
    ...filters,
    queryKey: ["@novu/api", "Subscribers", "retrieveLegacy"],
  });
}

export function buildSubscribersRetrieveLegacyQuery(
  client$: NovuCore,
  subscriberId: string,
  includeTopics?: boolean | undefined,
  idempotencyKey?: string | undefined,
  options?: RequestOptions,
): {
  queryKey: QueryKey;
  queryFn: (
    context: QueryFunctionContext,
  ) => Promise<SubscribersRetrieveLegacyQueryData>;
} {
  return {
    queryKey: queryKeySubscribersRetrieveLegacy(subscriberId, {
      includeTopics,
      idempotencyKey,
    }),
    queryFn: async function subscribersRetrieveLegacyQueryFn(
      ctx,
    ): Promise<SubscribersRetrieveLegacyQueryData> {
      const sig = combineSignals(ctx.signal, options?.fetchOptions?.signal);
      const mergedOptions = {
        ...options,
        fetchOptions: { ...options?.fetchOptions, signal: sig },
      };

      return unwrapAsync(subscribersRetrieveLegacy(
        client$,
        subscriberId,
        includeTopics,
        idempotencyKey,
        mergedOptions,
      ));
    },
  };
}

export function queryKeySubscribersRetrieveLegacy(
  subscriberId: string,
  parameters: {
    includeTopics?: boolean | undefined;
    idempotencyKey?: string | undefined;
  },
): QueryKey {
  return [
    "@novu/api",
    "Subscribers",
    "retrieveLegacy",
    subscriberId,
    parameters,
  ];
}
